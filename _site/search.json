[
  {
    "objectID": "technical-details/unsupervised-learning/main.html",
    "href": "technical-details/unsupervised-learning/main.html",
    "title": "Unsupervised Learning",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThis page is designed to give you hands-on experience with key unsupervised learning techniques, including clustering methods and dimensionality reduction, applied to real-world datasets. Please apply algorithms such as K-Means, DBSCAN, Hierarchical clustering, PCA, and t-SNE to your data. Through this process, you’ll deepen your understanding of how unsupervised learning can reveal hidden patterns and structure in data.\n\n\nThe objective of this section is to explore and demonstrate the effectiveness of PCA and t-SNE in reducing the dimensionality of complex data while preserving essential information and improving visualization.\n\nPCA (Principal Component Analysis):\n\nApply PCA to your dataset.\nDetermine the optimal number of principal components.\nVisualize the reduced-dimensional data.\nAnalyze and interpret the results.\n\nt-SNE (t-distributed Stochastic Neighbor Embedding):\n\nImplement t-SNE on the same dataset.\nExperiment with different perplexity values.\nVisualize the t-SNE output to reveal patterns and clusters.\nCompare the results of t-SNE with those from PCA.\n\nEvaluation and Comparison:\n\nEvaluate the effectiveness of PCA and t-SNE in preserving data structure.\nCompare the visualization capabilities of both techniques.\nDiscuss the trade-offs and scenarios where one technique may perform better than the other.\n\n\n\n\n\nApply clustering techniques (K-Means, DBSCAN, and Hierarchical clustering) to a selected dataset. The goal is to understand how each method works, compare their performance, and interpret the results.\n\nClustering Methods:\n\nApply K-Means, DBSCAN, and Hierarchical clustering to your dataset.\nWrite a technical summary for each method (2–4 paragraphs per method) explaining how it works, its purpose, and any model selection methods used (e.g., Elbow, Silhouette).\n\nResults Section:\n\nDiscuss and visualize the results of each clustering analysis.\nCompare the performance of different clustering methods, noting any insights gained from the analysis.\nVisualize cluster patterns and how they relate (if at all) to existing labels in the dataset.\nUse professional, labeled, and clear visualizations that support your discussion.\n\nConclusion:\n\nSummarize the key findings and their real-world implications in a non-technical way. Focus on the most important results and how they could apply to practical situations."
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#suggested-page-structure",
    "href": "technical-details/unsupervised-learning/main.html#suggested-page-structure",
    "title": "Unsupervised Learning",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#what-to-address",
    "href": "technical-details/unsupervised-learning/main.html#what-to-address",
    "title": "Unsupervised Learning",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThis page is designed to give you hands-on experience with key unsupervised learning techniques, including clustering methods and dimensionality reduction, applied to real-world datasets. Please apply algorithms such as K-Means, DBSCAN, Hierarchical clustering, PCA, and t-SNE to your data. Through this process, you’ll deepen your understanding of how unsupervised learning can reveal hidden patterns and structure in data.\n\n\nThe objective of this section is to explore and demonstrate the effectiveness of PCA and t-SNE in reducing the dimensionality of complex data while preserving essential information and improving visualization.\n\nPCA (Principal Component Analysis):\n\nApply PCA to your dataset.\nDetermine the optimal number of principal components.\nVisualize the reduced-dimensional data.\nAnalyze and interpret the results.\n\nt-SNE (t-distributed Stochastic Neighbor Embedding):\n\nImplement t-SNE on the same dataset.\nExperiment with different perplexity values.\nVisualize the t-SNE output to reveal patterns and clusters.\nCompare the results of t-SNE with those from PCA.\n\nEvaluation and Comparison:\n\nEvaluate the effectiveness of PCA and t-SNE in preserving data structure.\nCompare the visualization capabilities of both techniques.\nDiscuss the trade-offs and scenarios where one technique may perform better than the other.\n\n\n\n\n\nApply clustering techniques (K-Means, DBSCAN, and Hierarchical clustering) to a selected dataset. The goal is to understand how each method works, compare their performance, and interpret the results.\n\nClustering Methods:\n\nApply K-Means, DBSCAN, and Hierarchical clustering to your dataset.\nWrite a technical summary for each method (2–4 paragraphs per method) explaining how it works, its purpose, and any model selection methods used (e.g., Elbow, Silhouette).\n\nResults Section:\n\nDiscuss and visualize the results of each clustering analysis.\nCompare the performance of different clustering methods, noting any insights gained from the analysis.\nVisualize cluster patterns and how they relate (if at all) to existing labels in the dataset.\nUse professional, labeled, and clear visualizations that support your discussion.\n\nConclusion:\n\nSummarize the key findings and their real-world implications in a non-technical way. Focus on the most important results and how they could apply to practical situations."
  },
  {
    "objectID": "technical-details/eda/main.html",
    "href": "technical-details/eda/main.html",
    "title": "Points by Driver for Different Teams",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe EDA (Exploratory Data Analysis) tab in your portfolio serves as a crucial foundation for your project. It provides a thorough overview of the dataset, highlights patterns, identifies potential issues, and prepares the data for further analysis. Follow these instructions to document your EDA effectively:\nThe goal of EDA is to gain a deeper understanding of the dataset and its relevance to your project’s objectives. It involves summarizing key data characteristics, identifying patterns, anomalies, and preparing for future analysis phases.\nHere are suggestions for things to include on this page\nUnivariate Analysis:\n\nNumerical Variables:\n\nProvide summary statistics (mean, median, standard deviation).\nVisualize distributions using histograms or density plots.\n\nCategorical Variables:\n\nPresent frequency counts and visualize distributions using bar charts or pie charts.\n\nKey Insights:\n\nHighlight any notable trends or patterns observed.\n\n\nBivariate and Multivariate Analysis:\n\nCorrelation Analysis:\n\nAnalyze relationships between numerical variables using a correlation matrix.\nVisualize with heatmaps or pair plots and discuss any strong correlations.\n\nCrosstabulations:\n\nFor categorical variables, use crosstabs to explore relationships and visualize them with grouped bar plots.\n\nFeature Pairings:\n\nAnalyze relationships between key variables, particularly those related to your target.\nVisualize with scatter plots, box plots, or violin plots.\n\n\nData Distribution and Normalization:\n\nSkewness and Kurtosis:\nAnalyze and discuss the distribution of variables.\nApply transformations (e.g., log transformation) if needed for skewed data.\nNormalization:\nApply normalization or scaling techniques (e.g., min-max scaling, z-score).\nDocument and visualize the impact of normalization.\n\nStatistical Insights:\n\nConduct basic statistical tests (e.g., T-tests, ANOVA, chi-square) to explore relationships between variables.\nSummarize the statistical results and their implications for your analysis.\n\nData Visualization and Storytelling:\n\nVisual Summary:\nPresent key insights using charts and visualizations (e.g., Matplotlib, Seaborn, Plotly).\nEnsure all visualizations are well-labeled and easy to interpret.\nInteractive Visualizations (Optional):\nInclude interactive elements (e.g., Plotly, Bokeh) to allow users to explore the data further.\n\nConclusions and Next Steps:\n\nSummary of EDA Findings:\nHighlight the main takeaways from the EDA process (key trends, patterns, data quality issues).\nImplications for Modeling:\nDiscuss how your EDA informs the next steps in your project (e.g., feature selection, data transformations).\nOutline any further data cleaning or preparation required before moving into modeling."
  },
  {
    "objectID": "technical-details/eda/main.html#suggested-page-structure",
    "href": "technical-details/eda/main.html#suggested-page-structure",
    "title": "Points by Driver for Different Teams",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/eda/main.html#what-to-address",
    "href": "technical-details/eda/main.html#what-to-address",
    "title": "Points by Driver for Different Teams",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe EDA (Exploratory Data Analysis) tab in your portfolio serves as a crucial foundation for your project. It provides a thorough overview of the dataset, highlights patterns, identifies potential issues, and prepares the data for further analysis. Follow these instructions to document your EDA effectively:\nThe goal of EDA is to gain a deeper understanding of the dataset and its relevance to your project’s objectives. It involves summarizing key data characteristics, identifying patterns, anomalies, and preparing for future analysis phases.\nHere are suggestions for things to include on this page\nUnivariate Analysis:\n\nNumerical Variables:\n\nProvide summary statistics (mean, median, standard deviation).\nVisualize distributions using histograms or density plots.\n\nCategorical Variables:\n\nPresent frequency counts and visualize distributions using bar charts or pie charts.\n\nKey Insights:\n\nHighlight any notable trends or patterns observed.\n\n\nBivariate and Multivariate Analysis:\n\nCorrelation Analysis:\n\nAnalyze relationships between numerical variables using a correlation matrix.\nVisualize with heatmaps or pair plots and discuss any strong correlations.\n\nCrosstabulations:\n\nFor categorical variables, use crosstabs to explore relationships and visualize them with grouped bar plots.\n\nFeature Pairings:\n\nAnalyze relationships between key variables, particularly those related to your target.\nVisualize with scatter plots, box plots, or violin plots.\n\n\nData Distribution and Normalization:\n\nSkewness and Kurtosis:\nAnalyze and discuss the distribution of variables.\nApply transformations (e.g., log transformation) if needed for skewed data.\nNormalization:\nApply normalization or scaling techniques (e.g., min-max scaling, z-score).\nDocument and visualize the impact of normalization.\n\nStatistical Insights:\n\nConduct basic statistical tests (e.g., T-tests, ANOVA, chi-square) to explore relationships between variables.\nSummarize the statistical results and their implications for your analysis.\n\nData Visualization and Storytelling:\n\nVisual Summary:\nPresent key insights using charts and visualizations (e.g., Matplotlib, Seaborn, Plotly).\nEnsure all visualizations are well-labeled and easy to interpret.\nInteractive Visualizations (Optional):\nInclude interactive elements (e.g., Plotly, Bokeh) to allow users to explore the data further.\n\nConclusions and Next Steps:\n\nSummary of EDA Findings:\nHighlight the main takeaways from the EDA process (key trends, patterns, data quality issues).\nImplications for Modeling:\nDiscuss how your EDA informs the next steps in your project (e.g., feature selection, data transformations).\nOutline any further data cleaning or preparation required before moving into modeling."
  },
  {
    "objectID": "technical-details/data-cleaning/main.html",
    "href": "technical-details/data-cleaning/main.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you on this page will be specific you your project and data. Some things might “make more sense” on other pages, depending on your workflow, for example, you might feel that normalization and scaling should be included in a later section, dealing with machine learning, rather than here, that is totally fine. Organize your project in the way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\n\nIterative Process: Data cleaning is often not a one-time process. As your analysis progresses, you may need to revisit the cleaning phase, and re-run the code, to adjust to new insights or requirements.\nClarity and Reproducibility: Ensure your documentation is clear and thorough. Others should be able to follow your steps and achieve the same results.\nVisualizations: Use before-and-after visualizations to illustrate the impact of your cleaning steps, making the process more intuitive and transparent.\n\nBy the end of this phase, your cleaned data should be well-documented and ready for further stages, such as Exploratory Data Analysis (EDA) and Machine Learning.\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe Data Cleaning page of your portfolio is where you document the process of transforming your raw data into a usable format. Data cleaning is essential for ensuring the quality of your analysis, and this page should serve as a clear and reproducible guide for anyone reviewing your work. It also provides transparency, allowing others to trace the steps you took to prepare your data.\nThe following is a guide to help you get started with possible thing to address on this page .\n\nDescription of the Data Cleaning Process: Explain the steps you took to clean and preprocess the data.\nCode Documentation: Provide the code used in the data cleaning process (link to GitHub or embed the code directly).\nProvide examples of data before and after cleaning: e.g. with df.head() or df.describe()\nRaw and Cleaned Data Links: Ensure your page links to both the original (raw) dataset and the cleaned dataset. (please keep organized and store the cleaned data in data/processed-data, or similar location which doesn’t get synced to GitHub)\n\nPossible things to include:\nIntroduction to Data Cleaning:\n\nProvide a brief explanation of the data cleaning phase, its importance in preparing the data for further analysis (EDA, modeling), and its iterative nature.\nMention that data cleaning may need to be revisited as the project evolves and analysis goals change.\n\nManaging Missing Data:\n\nIdentify Missing Values: Explain how you identified missing data and where it occurred.\nHandling Missing Data: Describe how missing values were addressed (e.g., imputation, removal of rows/columns).\nVisualize Missing Data: Include visualizations (e.g., heatmaps) showing missing values before and after handling them.\n\nOutlier Detection and Treatment:\n\nIdentify Outliers: Describe the methods you used to detect outliers in the dataset.\nAddressing Outliers: Explain how outliers were treated (e.g., removal, transformation, or retaining them for analysis).\nVisualize Outliers: Use visualizations (e.g., box plots) to show how outliers were managed.\n\nData Type Correction and Formatting:\n\nReview Data Types: Summarize the types of variables (numerical, categorical, date-time, etc.) and ensure they are correctly formatted.\nTransformation: Document any transformations performed, such as converting date formats, handling categorical variables, or encoding labels.\nImpact of Changes: Briefly explain why these changes were necessary for accurate analysis.\n\nNormalization and Scaling:\n\nData Distribution Analysis: Check and discuss the distribution of numerical variables (e.g., skewness).\nNormalization Techniques: Describe any normalization or scaling techniques used (e.g., min-max scaling, z-score normalization).\nBefore-and-After Visualizations: Provide visualizations comparing the data before and after scaling or normalization.\n\nSubsetting the Data:\n\nData Filtering: Explain any subsetting or filtering of the data (e.g., selecting quantitative or qualitative columns).\nRationale: Justify why you chose to work with a particular subset of the data."
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#suggested-page-structure",
    "href": "technical-details/data-cleaning/main.html#suggested-page-structure",
    "title": "Data Cleaning",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#general-comments",
    "href": "technical-details/data-cleaning/main.html#general-comments",
    "title": "Data Cleaning",
    "section": "",
    "text": "Iterative Process: Data cleaning is often not a one-time process. As your analysis progresses, you may need to revisit the cleaning phase, and re-run the code, to adjust to new insights or requirements.\nClarity and Reproducibility: Ensure your documentation is clear and thorough. Others should be able to follow your steps and achieve the same results.\nVisualizations: Use before-and-after visualizations to illustrate the impact of your cleaning steps, making the process more intuitive and transparent.\n\nBy the end of this phase, your cleaned data should be well-documented and ready for further stages, such as Exploratory Data Analysis (EDA) and Machine Learning."
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#what-to-address",
    "href": "technical-details/data-cleaning/main.html#what-to-address",
    "title": "Data Cleaning",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe Data Cleaning page of your portfolio is where you document the process of transforming your raw data into a usable format. Data cleaning is essential for ensuring the quality of your analysis, and this page should serve as a clear and reproducible guide for anyone reviewing your work. It also provides transparency, allowing others to trace the steps you took to prepare your data.\nThe following is a guide to help you get started with possible thing to address on this page .\n\nDescription of the Data Cleaning Process: Explain the steps you took to clean and preprocess the data.\nCode Documentation: Provide the code used in the data cleaning process (link to GitHub or embed the code directly).\nProvide examples of data before and after cleaning: e.g. with df.head() or df.describe()\nRaw and Cleaned Data Links: Ensure your page links to both the original (raw) dataset and the cleaned dataset. (please keep organized and store the cleaned data in data/processed-data, or similar location which doesn’t get synced to GitHub)\n\nPossible things to include:\nIntroduction to Data Cleaning:\n\nProvide a brief explanation of the data cleaning phase, its importance in preparing the data for further analysis (EDA, modeling), and its iterative nature.\nMention that data cleaning may need to be revisited as the project evolves and analysis goals change.\n\nManaging Missing Data:\n\nIdentify Missing Values: Explain how you identified missing data and where it occurred.\nHandling Missing Data: Describe how missing values were addressed (e.g., imputation, removal of rows/columns).\nVisualize Missing Data: Include visualizations (e.g., heatmaps) showing missing values before and after handling them.\n\nOutlier Detection and Treatment:\n\nIdentify Outliers: Describe the methods you used to detect outliers in the dataset.\nAddressing Outliers: Explain how outliers were treated (e.g., removal, transformation, or retaining them for analysis).\nVisualize Outliers: Use visualizations (e.g., box plots) to show how outliers were managed.\n\nData Type Correction and Formatting:\n\nReview Data Types: Summarize the types of variables (numerical, categorical, date-time, etc.) and ensure they are correctly formatted.\nTransformation: Document any transformations performed, such as converting date formats, handling categorical variables, or encoding labels.\nImpact of Changes: Briefly explain why these changes were necessary for accurate analysis.\n\nNormalization and Scaling:\n\nData Distribution Analysis: Check and discuss the distribution of numerical variables (e.g., skewness).\nNormalization Techniques: Describe any normalization or scaling techniques used (e.g., min-max scaling, z-score normalization).\nBefore-and-After Visualizations: Provide visualizations comparing the data before and after scaling or normalization.\n\nSubsetting the Data:\n\nData Filtering: Explain any subsetting or filtering of the data (e.g., selecting quantitative or qualitative columns).\nRationale: Justify why you chose to work with a particular subset of the data."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html",
    "href": "technical-details/supervised-learning/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Note: You should remove these instruction once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nPlease do some form of “Feature selection” in your project and include a section on it. Discuss the process you went through to select the features that you used in your model, this should be done for both classification models and regression models. What did you include and why? What did you exclude? What was the reasoning behind your decisions? This section can be included here, or you can make a new page in the dropdown menu for it.\nPlease break this page into a “regression” section, “binary classification” section, and a “Multi-class classification” section. For each case you should try multiple methods, including those discussed in class, and compare and contrast their preformance and results.\n\n\n\n\nNormalization or Standardization: Apply techniques to scale the data appropriately.\nFeature Selection or Extraction: Identify and select the most relevant features for your analysis.\nEncoding Categorical Variables: Convert categorical variables into a suitable format for modeling.\n\n\n\n\n\nModel Rationale: Explain the reasons for selecting specific models or algorithms.\nOverview of Algorithms: Provide a brief overview of the algorithms used\n\n\n\n\n\nSplit Methods: Detail the splitting methods used (e.g., train-test split, cross-validation).\nDataset Proportions: Specify the proportions used for splitting the dataset.\n\n\n\n\n\nBinary Classification Metrics: Discuss metrics such as accuracy, precision, recall, F1 score, and ROC-AUC.\nMulticlass Classification Metrics: Include metrics such as confusion matrix and macro/micro F1 score.\nRegression Metrics: Explain metrics such as RMSE, MAE, and R-squared, parity plots, etc.\n\n\n\n\n\nModel Performance Summary: Provide a summary of the model’s performance.\nVisualizations: Include visualizations of results (e.g., ROC curves, feature importance plots).\n\n\n\n\n\nResult Interpretation: Interpret the results obtained from the analysis.\nModel Performance Comparison: Compare the performance of different models.\nInsights Gained: Share insights learned from the analysis."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#suggested-page-structure",
    "href": "technical-details/supervised-learning/instructions.html#suggested-page-structure",
    "title": "Instructions",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#what-to-address",
    "href": "technical-details/supervised-learning/instructions.html#what-to-address",
    "title": "Instructions",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nPlease do some form of “Feature selection” in your project and include a section on it. Discuss the process you went through to select the features that you used in your model, this should be done for both classification models and regression models. What did you include and why? What did you exclude? What was the reasoning behind your decisions? This section can be included here, or you can make a new page in the dropdown menu for it.\nPlease break this page into a “regression” section, “binary classification” section, and a “Multi-class classification” section. For each case you should try multiple methods, including those discussed in class, and compare and contrast their preformance and results."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#data-preprocessing",
    "href": "technical-details/supervised-learning/instructions.html#data-preprocessing",
    "title": "Instructions",
    "section": "",
    "text": "Normalization or Standardization: Apply techniques to scale the data appropriately.\nFeature Selection or Extraction: Identify and select the most relevant features for your analysis.\nEncoding Categorical Variables: Convert categorical variables into a suitable format for modeling."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#model-selection",
    "href": "technical-details/supervised-learning/instructions.html#model-selection",
    "title": "Instructions",
    "section": "",
    "text": "Model Rationale: Explain the reasons for selecting specific models or algorithms.\nOverview of Algorithms: Provide a brief overview of the algorithms used"
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#training-and-testing-strategy",
    "href": "technical-details/supervised-learning/instructions.html#training-and-testing-strategy",
    "title": "Instructions",
    "section": "",
    "text": "Split Methods: Detail the splitting methods used (e.g., train-test split, cross-validation).\nDataset Proportions: Specify the proportions used for splitting the dataset."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#model-evaluation-metrics",
    "href": "technical-details/supervised-learning/instructions.html#model-evaluation-metrics",
    "title": "Instructions",
    "section": "",
    "text": "Binary Classification Metrics: Discuss metrics such as accuracy, precision, recall, F1 score, and ROC-AUC.\nMulticlass Classification Metrics: Include metrics such as confusion matrix and macro/micro F1 score.\nRegression Metrics: Explain metrics such as RMSE, MAE, and R-squared, parity plots, etc."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#results",
    "href": "technical-details/supervised-learning/instructions.html#results",
    "title": "Instructions",
    "section": "",
    "text": "Model Performance Summary: Provide a summary of the model’s performance.\nVisualizations: Include visualizations of results (e.g., ROC curves, feature importance plots)."
  },
  {
    "objectID": "technical-details/supervised-learning/instructions.html#discussion",
    "href": "technical-details/supervised-learning/instructions.html#discussion",
    "title": "Instructions",
    "section": "",
    "text": "Result Interpretation: Interpret the results obtained from the analysis.\nModel Performance Comparison: Compare the performance of different models.\nInsights Gained: Share insights learned from the analysis."
  },
  {
    "objectID": "technical-details/llm-usage-log.html",
    "href": "technical-details/llm-usage-log.html",
    "title": "LLM usage log",
    "section": "",
    "text": "This page can serve as a “catch-all” for LLM use cases that don’t involve content creation, such as reformatting your own ideas, commenting code that you wrote, or proofreading text, PDF summarization.\nLLM tools were used in the following way for the tasks below"
  },
  {
    "objectID": "technical-details/llm-usage-log.html#brainstorming",
    "href": "technical-details/llm-usage-log.html#brainstorming",
    "title": "LLM usage log",
    "section": "Brainstorming",
    "text": "Brainstorming\n\nTo create the initial idea, LLM tools were used to brainstorm ideas and provide feedback and refine the project plan."
  },
  {
    "objectID": "technical-details/llm-usage-log.html#writing",
    "href": "technical-details/llm-usage-log.html#writing",
    "title": "LLM usage log",
    "section": "Writing:",
    "text": "Writing:\n\nReformating text from bulleted lists into proses\nProofreading\nText summarization for literature review"
  },
  {
    "objectID": "technical-details/llm-usage-log.html#code",
    "href": "technical-details/llm-usage-log.html#code",
    "title": "LLM usage log",
    "section": "Code:",
    "text": "Code:\n\nCode commenting and explanatory documentation"
  },
  {
    "objectID": "technical-details/data-collection/overview.html",
    "href": "technical-details/data-collection/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\nIn this section, provide a high-level overview for technical staff, summarizing the key tasks and processes carried out here. Include the following elements:\n\nGoals: Clearly define the purpose of the tasks or analysis being conducted.\nMotivation: Explain the reasoning behind the work, such as solving a specific problem, improving a system, or optimizing performance.\nObjectives: Outline the specific outcomes you aim to achieve, whether it’s implementing a solution, analyzing data, or building a model.\n\nThis overview should give technical staff a clear understanding of the context and importance of the work, while guiding them on what to focus on in the details that follow."
  },
  {
    "objectID": "technical-details/data-collection/instructions.html",
    "href": "technical-details/data-collection/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Note: You should remove these instruction once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\nIn the provide repo, these subsections have been included in the data-collection file as separate .qmd files that can be embedded using the {{&lt; include  &gt;}} tag.\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nOn this page, you will focus on data collection, which is an essential step for future analysis. You should have already selected a specific data-science question that can be addressed in a data-driven way.\nIt is recommended that you focus on one or two of the following data formats, text, tabular, image, geospatial, or network data.\nTabular (e.g. CSV files) and text formats are highly recommended, as these are covered most thoroughly in the course. Deviating from these formats may require additional work on your end. Please avoid timeseries data formats, as these require special methods not covered in the course. You can include as many additional formats as you want. Your project will revolve around the data you gather and will include data collection, analysis, visualization, and storytelling.\n\n\n\nBegin gathering your data and document the methods and sources on the Data Collection page of your project. Include screenshots or example tables to illustrate the data collection process without displaying entire datasets. Ensure transparency so anyone can replicate your work.\n\n\n\n\nDuring the collection phase, save the collected data locally to the data/raw-data folder, in the root of the project, for later processing. (Do not sync this folder to GitHub.)\nRemember, the “raw data” should typically be left “pristine”, to ensure replicability.\nLater when you clean the data, you should save the cleaned data to the data/processed-data folder, in the root of the project.\nYou should also save files you download manually from online to this folder\n\n\n\n\n\nYour data must be relevant to the project’s overall goals and help solve your research questions.\nYou must use at least one API to collect your data.\nEnsure you have at least one regression target: a continuous quantity that can be used for regression prediction with other features.\nEnsure you have at least one binary classification target: a two-class (A,B) label that can be predicted using other features.\nEnsure you have at least one multiclass-classification target: a multi-class (A,B,C …) label that can be predicted using other features.\nDo not use a Kaggle topic—this project is meant to simulate a real-world project. Kaggle datasets are typically too clean and have already been prepped for analysis, which doesn’t align with the project’s goals.\n\nFocus on data that tells a compelling story and supports the techniques covered in the class (e.g., clustering, classification, regression)."
  },
  {
    "objectID": "technical-details/data-collection/instructions.html#suggested-page-structure",
    "href": "technical-details/data-collection/instructions.html#suggested-page-structure",
    "title": "Instructions",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\nIn the provide repo, these subsections have been included in the data-collection file as separate .qmd files that can be embedded using the {{&lt; include  &gt;}} tag."
  },
  {
    "objectID": "technical-details/data-collection/instructions.html#what-to-address",
    "href": "technical-details/data-collection/instructions.html#what-to-address",
    "title": "Instructions",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nOn this page, you will focus on data collection, which is an essential step for future analysis. You should have already selected a specific data-science question that can be addressed in a data-driven way.\nIt is recommended that you focus on one or two of the following data formats, text, tabular, image, geospatial, or network data.\nTabular (e.g. CSV files) and text formats are highly recommended, as these are covered most thoroughly in the course. Deviating from these formats may require additional work on your end. Please avoid timeseries data formats, as these require special methods not covered in the course. You can include as many additional formats as you want. Your project will revolve around the data you gather and will include data collection, analysis, visualization, and storytelling."
  },
  {
    "objectID": "technical-details/data-collection/instructions.html#start-collecting-data",
    "href": "technical-details/data-collection/instructions.html#start-collecting-data",
    "title": "Instructions",
    "section": "",
    "text": "Begin gathering your data and document the methods and sources on the Data Collection page of your project. Include screenshots or example tables to illustrate the data collection process without displaying entire datasets. Ensure transparency so anyone can replicate your work."
  },
  {
    "objectID": "technical-details/data-collection/instructions.html#saving-the-raw-data",
    "href": "technical-details/data-collection/instructions.html#saving-the-raw-data",
    "title": "Instructions",
    "section": "",
    "text": "During the collection phase, save the collected data locally to the data/raw-data folder, in the root of the project, for later processing. (Do not sync this folder to GitHub.)\nRemember, the “raw data” should typically be left “pristine”, to ensure replicability.\nLater when you clean the data, you should save the cleaned data to the data/processed-data folder, in the root of the project.\nYou should also save files you download manually from online to this folder"
  },
  {
    "objectID": "technical-details/data-collection/instructions.html#requirements",
    "href": "technical-details/data-collection/instructions.html#requirements",
    "title": "Instructions",
    "section": "",
    "text": "Your data must be relevant to the project’s overall goals and help solve your research questions.\nYou must use at least one API to collect your data.\nEnsure you have at least one regression target: a continuous quantity that can be used for regression prediction with other features.\nEnsure you have at least one binary classification target: a two-class (A,B) label that can be predicted using other features.\nEnsure you have at least one multiclass-classification target: a multi-class (A,B,C …) label that can be predicted using other features.\nDo not use a Kaggle topic—this project is meant to simulate a real-world project. Kaggle datasets are typically too clean and have already been prepped for analysis, which doesn’t align with the project’s goals.\n\nFocus on data that tells a compelling story and supports the techniques covered in the class (e.g., clustering, classification, regression)."
  },
  {
    "objectID": "technical-details/data-cleaning/instructions.html",
    "href": "technical-details/data-cleaning/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you on this page will be specific you your project and data. Some things might “make more sense” on other pages, depending on your workflow, for example, you might feel that normalization and scaling should be included in a later section, dealing with machine learning, rather than here, that is totally fine. Organize your project in the way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\n\nIterative Process: Data cleaning is often not a one-time process. As your analysis progresses, you may need to revisit the cleaning phase, and re-run the code, to adjust to new insights or requirements.\nClarity and Reproducibility: Ensure your documentation is clear and thorough. Others should be able to follow your steps and achieve the same results.\nVisualizations: Use before-and-after visualizations to illustrate the impact of your cleaning steps, making the process more intuitive and transparent.\n\nBy the end of this phase, your cleaned data should be well-documented and ready for further stages, such as Exploratory Data Analysis (EDA) and Machine Learning.\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe Data Cleaning page of your portfolio is where you document the process of transforming your raw data into a usable format. Data cleaning is essential for ensuring the quality of your analysis, and this page should serve as a clear and reproducible guide for anyone reviewing your work. It also provides transparency, allowing others to trace the steps you took to prepare your data.\nThe following is a guide to help you get started with possible thing to address on this page .\n\nDescription of the Data Cleaning Process: Explain the steps you took to clean and preprocess the data.\nCode Documentation: Provide the code used in the data cleaning process (link to GitHub or embed the code directly).\nProvide examples of data before and after cleaning: e.g. with df.head() or df.describe()\nRaw and Cleaned Data Links: Ensure your page links to both the original (raw) dataset and the cleaned dataset. (please keep organized and store the cleaned data in data/processed-data, or similar location which doesn’t get synced to GitHub)\n\nPossible things to include:\nIntroduction to Data Cleaning:\n\nProvide a brief explanation of the data cleaning phase, its importance in preparing the data for further analysis (EDA, modeling), and its iterative nature.\nMention that data cleaning may need to be revisited as the project evolves and analysis goals change.\n\nManaging Missing Data:\n\nIdentify Missing Values: Explain how you identified missing data and where it occurred.\nHandling Missing Data: Describe how missing values were addressed (e.g., imputation, removal of rows/columns).\nVisualize Missing Data: Include visualizations (e.g., heatmaps) showing missing values before and after handling them.\n\nOutlier Detection and Treatment:\n\nIdentify Outliers: Describe the methods you used to detect outliers in the dataset.\nAddressing Outliers: Explain how outliers were treated (e.g., removal, transformation, or retaining them for analysis).\nVisualize Outliers: Use visualizations (e.g., box plots) to show how outliers were managed.\n\nData Type Correction and Formatting:\n\nReview Data Types: Summarize the types of variables (numerical, categorical, date-time, etc.) and ensure they are correctly formatted.\nTransformation: Document any transformations performed, such as converting date formats, handling categorical variables, or encoding labels.\nImpact of Changes: Briefly explain why these changes were necessary for accurate analysis.\n\nNormalization and Scaling:\n\nData Distribution Analysis: Check and discuss the distribution of numerical variables (e.g., skewness).\nNormalization Techniques: Describe any normalization or scaling techniques used (e.g., min-max scaling, z-score normalization).\nBefore-and-After Visualizations: Provide visualizations comparing the data before and after scaling or normalization.\n\nSubsetting the Data:\n\nData Filtering: Explain any subsetting or filtering of the data (e.g., selecting quantitative or qualitative columns).\nRationale: Justify why you chose to work with a particular subset of the data."
  },
  {
    "objectID": "technical-details/data-cleaning/instructions.html#suggested-page-structure",
    "href": "technical-details/data-cleaning/instructions.html#suggested-page-structure",
    "title": "Instructions",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/data-cleaning/instructions.html#general-comments",
    "href": "technical-details/data-cleaning/instructions.html#general-comments",
    "title": "Instructions",
    "section": "",
    "text": "Iterative Process: Data cleaning is often not a one-time process. As your analysis progresses, you may need to revisit the cleaning phase, and re-run the code, to adjust to new insights or requirements.\nClarity and Reproducibility: Ensure your documentation is clear and thorough. Others should be able to follow your steps and achieve the same results.\nVisualizations: Use before-and-after visualizations to illustrate the impact of your cleaning steps, making the process more intuitive and transparent.\n\nBy the end of this phase, your cleaned data should be well-documented and ready for further stages, such as Exploratory Data Analysis (EDA) and Machine Learning."
  },
  {
    "objectID": "technical-details/data-cleaning/instructions.html#what-to-address",
    "href": "technical-details/data-cleaning/instructions.html#what-to-address",
    "title": "Instructions",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe Data Cleaning page of your portfolio is where you document the process of transforming your raw data into a usable format. Data cleaning is essential for ensuring the quality of your analysis, and this page should serve as a clear and reproducible guide for anyone reviewing your work. It also provides transparency, allowing others to trace the steps you took to prepare your data.\nThe following is a guide to help you get started with possible thing to address on this page .\n\nDescription of the Data Cleaning Process: Explain the steps you took to clean and preprocess the data.\nCode Documentation: Provide the code used in the data cleaning process (link to GitHub or embed the code directly).\nProvide examples of data before and after cleaning: e.g. with df.head() or df.describe()\nRaw and Cleaned Data Links: Ensure your page links to both the original (raw) dataset and the cleaned dataset. (please keep organized and store the cleaned data in data/processed-data, or similar location which doesn’t get synced to GitHub)\n\nPossible things to include:\nIntroduction to Data Cleaning:\n\nProvide a brief explanation of the data cleaning phase, its importance in preparing the data for further analysis (EDA, modeling), and its iterative nature.\nMention that data cleaning may need to be revisited as the project evolves and analysis goals change.\n\nManaging Missing Data:\n\nIdentify Missing Values: Explain how you identified missing data and where it occurred.\nHandling Missing Data: Describe how missing values were addressed (e.g., imputation, removal of rows/columns).\nVisualize Missing Data: Include visualizations (e.g., heatmaps) showing missing values before and after handling them.\n\nOutlier Detection and Treatment:\n\nIdentify Outliers: Describe the methods you used to detect outliers in the dataset.\nAddressing Outliers: Explain how outliers were treated (e.g., removal, transformation, or retaining them for analysis).\nVisualize Outliers: Use visualizations (e.g., box plots) to show how outliers were managed.\n\nData Type Correction and Formatting:\n\nReview Data Types: Summarize the types of variables (numerical, categorical, date-time, etc.) and ensure they are correctly formatted.\nTransformation: Document any transformations performed, such as converting date formats, handling categorical variables, or encoding labels.\nImpact of Changes: Briefly explain why these changes were necessary for accurate analysis.\n\nNormalization and Scaling:\n\nData Distribution Analysis: Check and discuss the distribution of numerical variables (e.g., skewness).\nNormalization Techniques: Describe any normalization or scaling techniques used (e.g., min-max scaling, z-score normalization).\nBefore-and-After Visualizations: Provide visualizations comparing the data before and after scaling or normalization.\n\nSubsetting the Data:\n\nData Filtering: Explain any subsetting or filtering of the data (e.g., selecting quantitative or qualitative columns).\nRationale: Justify why you chose to work with a particular subset of the data."
  },
  {
    "objectID": "instructions/website-structure.html",
    "href": "instructions/website-structure.html",
    "title": "Website project structure",
    "section": "",
    "text": "Please at miniumum include the following pages in your website:\n\nLanding page\nReport\nTechnical details\n\nData collection\nData cleaning\nEDA\nUnsupervised-learning\nSupervised-learning\nLLM-usage\nProgress-log\n\n\nPlease adhere closely to this structure, for consistency accross projects.\nSub-sections can be handles as markdown headers in the respective pages.\nYou can add more pages,and if you want, you can merge EDA and unsupervised learning into one page, since the are similar. Or make these section headers in the dropdown menu, for further sub-sections creation.\nFor example:\n\nLanding page\nReport\nTechnical details\n\nData collection\nData cleaning\nEDA\nUnsupervised-learning\n\nClustering\nDimensionality Reduction\n\nSupervised-learning\n\nFeature selection\n\nregression\nclassification\n\nClassification\n\nBinary classification\nMulti-class classification\n\nRegression\n\nLLM-usage\nProgress-log\n\n\nImportant: Exactly what you put on these pages will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\nA skeleton of the recommended version of the website is provided in the github classroom repository.\n./\n├── README.md\n├── _quarto.yml\n├── assets\n│   ├── gu-logo.png\n│   ├── nature.csl\n│   └── references.bib\n├── build.sh\n├── data\n│   ├── processed-data\n│   │   └── countries_population.csv\n│   └── raw-data\n│       └── countries_population.csv\n├── index.qmd\n├── instructions\n│   ├── expectations.qmd\n│   ├── github-usage.qmd\n│   ├── llm-usage.qmd\n│   ├── overview.qmd\n│   ├── quarto-tips.qmd\n│   ├── topic-selection.qmd\n│   └── website-structure.qmd\n├── report\n│   └── report.qmd\n└── technical-details\n    ├── data-cleaning\n    │   ├── instructions.qmd\n    │   └── main.ipynb\n    ├── data-collection\n    │   ├── closing.qmd\n    │   ├── instructions.qmd\n    │   ├── main.ipynb\n    │   ├── methods.qmd\n    │   └── overview.qmd\n    ├── eda\n    │   ├── instructions.qmd\n    │   └── main.ipynb\n    ├── llm-usage-log.qmd\n    ├── progress-log.qmd\n    ├── supervised-learning\n    │   ├── instructions.qmd\n    │   └── main.ipynb\n    └── unsupervised-learning\n        ├── instructions.qmd\n        └── main.ipynb\nAlways strive to incorporate the following:\n\nStructure: Use clear headings and subheadings to break down each section of your EDA.\nClarity: Provide concise explanations for all tables and visualizations, ensuring they are easy to interpret.\nCode Links: Link to relevant code (e.g., GitHub) or embed code snippets for transparency and reproducibility.\nReproducibility: Make your EDA reproducible by providing access to the dataset, scripts, and tools you used.\nVisualization: Use visualizations to convey key insights\n\n\n\nIt is required that you build your website with Quarto.\n\n\n\nYou MUST host your website on the Georgetown Domains web space.\nNo exceptions. You may NOT use anything other than Georgetown Domains to host your website. For example, no RPubs, WordPress, Squarespace, or any other website development toolset. Failure to comply with this rule will result in a ZERO.\n\n\n\nKnowing your audience in data science writing is crucial because it shapes how you present information. Technical stakeholders may require detailed explanations of methodologies, while non-technical audiences need clear, simplified insights and data-driven conclusions. Tailoring your message ensures your analysis is both understandable and impactful, driving informed decision-making.\n\nExamples of technical audiences include data scientists, software engineers, and IT professionals. These individuals expect detailed explanations of models, algorithms, methodologies, or system architectures, and they’re comfortable with technical jargon, such as discussing hyperparameters, programming frameworks, or machine learning techniques.\nNon-technical audiences include executives, marketing teams, and clients. They prioritize high-level insights, actionable results, and visualizations that convey the impact of data without requiring an understanding of complex methods. For instance, a CEO may want to know how a model affects business strategy or revenue, without diving into the underlying technical details.\n\nIn this project you will cater to both audiences. This is done by having regions of your website for both audiences (see website struture)"
  },
  {
    "objectID": "instructions/website-structure.html#website-development",
    "href": "instructions/website-structure.html#website-development",
    "title": "Website project structure",
    "section": "",
    "text": "It is required that you build your website with Quarto."
  },
  {
    "objectID": "instructions/website-structure.html#website-hosting",
    "href": "instructions/website-structure.html#website-hosting",
    "title": "Website project structure",
    "section": "",
    "text": "You MUST host your website on the Georgetown Domains web space.\nNo exceptions. You may NOT use anything other than Georgetown Domains to host your website. For example, no RPubs, WordPress, Squarespace, or any other website development toolset. Failure to comply with this rule will result in a ZERO."
  },
  {
    "objectID": "instructions/website-structure.html#the-two-audiences",
    "href": "instructions/website-structure.html#the-two-audiences",
    "title": "Website project structure",
    "section": "",
    "text": "Knowing your audience in data science writing is crucial because it shapes how you present information. Technical stakeholders may require detailed explanations of methodologies, while non-technical audiences need clear, simplified insights and data-driven conclusions. Tailoring your message ensures your analysis is both understandable and impactful, driving informed decision-making.\n\nExamples of technical audiences include data scientists, software engineers, and IT professionals. These individuals expect detailed explanations of models, algorithms, methodologies, or system architectures, and they’re comfortable with technical jargon, such as discussing hyperparameters, programming frameworks, or machine learning techniques.\nNon-technical audiences include executives, marketing teams, and clients. They prioritize high-level insights, actionable results, and visualizations that convey the impact of data without requiring an understanding of complex methods. For instance, a CEO may want to know how a model affects business strategy or revenue, without diving into the underlying technical details.\n\nIn this project you will cater to both audiences. This is done by having regions of your website for both audiences (see website struture)"
  },
  {
    "objectID": "instructions/quarto-tips.html",
    "href": "instructions/quarto-tips.html",
    "title": "Quarto Tips",
    "section": "",
    "text": "You can decide when to use .qmd vs .ipynb for structuring your code, but I recommend the following guidelines:\n\nIf the file contains any code (either in R or Python), ALWAYS use .ipynb.\nDo not mix R and Python in the same notebook.\nIf the file is purely markdown without code, use .qmd.\nUse Quarto includes to modularize your content (see below for more details). This is also demonstrated in the project skeleton.\n\n\n\n\nQuarto includes (e.g., {{&lt; include _content.qmd &gt;}}) are highly recommended for modularizing and organizing your content. While optional, they offer several advantages.\nNote: You can include a .qmd file in a .ipynb file, but not vice versa.\n\n\n\nModularization: Breaking your project into smaller, reusable chunks simplifies the management of complex documents. You can work on specific sections without altering the entire project.\nReusability: Includes allow you to reuse content blocks across multiple documents, making them ideal for repetitive sections like headers or footers.\nConsistency: By using includes, you ensure uniformity across your documents. Updating an include file will automatically apply the changes wherever it’s used.\nSimplifies Collaboration: In team settings, includes allow different contributors to work on separate sections simultaneously, reducing merge conflicts and making the project easier to maintain.\nImproved Organization: Includes help keep your main files clean and focused by loading content from separate, well-organized files. This makes your project more manageable and easier to navigate."
  },
  {
    "objectID": "instructions/quarto-tips.html#file-types",
    "href": "instructions/quarto-tips.html#file-types",
    "title": "Quarto Tips",
    "section": "",
    "text": "You can decide when to use .qmd vs .ipynb for structuring your code, but I recommend the following guidelines:\n\nIf the file contains any code (either in R or Python), ALWAYS use .ipynb.\nDo not mix R and Python in the same notebook.\nIf the file is purely markdown without code, use .qmd.\nUse Quarto includes to modularize your content (see below for more details). This is also demonstrated in the project skeleton."
  },
  {
    "objectID": "instructions/quarto-tips.html#quarto-includes",
    "href": "instructions/quarto-tips.html#quarto-includes",
    "title": "Quarto Tips",
    "section": "",
    "text": "Quarto includes (e.g., {{&lt; include _content.qmd &gt;}}) are highly recommended for modularizing and organizing your content. While optional, they offer several advantages.\nNote: You can include a .qmd file in a .ipynb file, but not vice versa.\n\n\n\nModularization: Breaking your project into smaller, reusable chunks simplifies the management of complex documents. You can work on specific sections without altering the entire project.\nReusability: Includes allow you to reuse content blocks across multiple documents, making them ideal for repetitive sections like headers or footers.\nConsistency: By using includes, you ensure uniformity across your documents. Updating an include file will automatically apply the changes wherever it’s used.\nSimplifies Collaboration: In team settings, includes allow different contributors to work on separate sections simultaneously, reducing merge conflicts and making the project easier to maintain.\nImproved Organization: Includes help keep your main files clean and focused by loading content from separate, well-organized files. This makes your project more manageable and easier to navigate."
  },
  {
    "objectID": "instructions/llm-usage.html",
    "href": "instructions/llm-usage.html",
    "title": "LLM usage",
    "section": "",
    "text": "We believe that the adoption of LLM tools is inevitable and will be an important skill for success in your future career. Therefore, appropriate and acceptable use of LLM tools is encouraged for this project. Use them to accelerate your workflow and learning, but not as a replacement for critical thinking and understanding. Carefully review and process their output, use them judiciously, and avoid bloating your text with LLM-generated content. Overusing these tools often degrades the quality of your work rather than enhancing it.\nRemember the following guidelines:\n\nUse common sense: If you feel like you’re doing something questionable, you probably are. A good test is to ask yourself, “Would I openly tell the professor or classmates what I’m doing right now?” If the answer is no, you’re probably doing something you shouldn’t.\nCite your LLM use cases: Always cite when and how you’ve used LLM tools. This is a requirement for the project.\nIs your use helping you grow professionally?: If your use of LLM tools is making you a more competent, efficient, and knowledgeable professional, you’re probably using them in an appropriate manner. If you’re using them as a shortcut to avoid work and gain free time, you’re using them incorrectly.\n\n\n\nALWAY CITE CONTENT OR IDEAS TAKEN FROM EXTERNAL SOURCES: e.g. websites, llm tools, papers\nALWAYS BE TRANSPARENT WHEN YOU ARE USING LLM TOOLS:\nPlease follow these guidelines:\n\nGeneral Tasks: Create and regularly update a dedicated LLM Transparency page to document how you are using LLM tools.\n\nThis page can serve as a “catch-all” for use cases that don’t involve content creation, such as reformatting your own ideas, commenting code that you wrote, or proofreading text, PDF summarization.\n\nContent Creation: If non-original content (code or text) is generated by an LLM, you must also cite it on specific pages, just like any external source.\n\nFor non-original content, always provide a citation.\nCite the LLM tool after each chunk of text or code it generates, using a BibTeX. For example1\n\n\n\n\n\nNote: Various useful non-LLM research tools can be found here at the following link\n\nTraditional research tools\n\nYou can use LLM tools for the following use cases\n\nAI research tools\nThese include\n\nre-formating text with LLM tools.\nCode explaination “describe what this code is doing in prose”\nText summarization\nProofreading\n\nchatGPT for project brainstorming\nUsing LLM tools to comment your code qualifies as an acceptible use case in this project. You can also use or code re-formatters such as black to increase the readability of your code.\n\n\n\n\n\nDO NOT use ChatGPT or other LLM tools to write large portions of your text or code.\n\n\nIf it is clear that you have used LLM tools to write large portions of your code or text, your grade will reflect this, likely in the range of 0% to 50% of the total points, depending on the quality of the work. LLM outputs still require significant polishing to fit into a well-written, cohesive narrative. If it is evident that you simply inserted large portions of LLM-generated content into your assignment without taking the time to refine it into a high-quality submission, your grade will reflect this, even if the usage does not rise to the level of plagiarism.\n\n\n\nIn extreme cases,the following actions will occur.\n\nOne-on-One Investigation: You will meet with department faculty for a thorough review of your project. You will be asked to explain your work in detail, including what specific chunks of code do, why you made certain decisions, and how you reached your conclusions.\nReferral to the Honor Council: If, during this meeting, it is determined that you do not have sufficient understanding of the content that you claimed to have created, the case will be documented and sent to the honor council. This can result in a permanent mark on your transcript and may even lead to expulsion from the university."
  },
  {
    "objectID": "instructions/llm-usage.html#citation",
    "href": "instructions/llm-usage.html#citation",
    "title": "LLM usage",
    "section": "",
    "text": "ALWAY CITE CONTENT OR IDEAS TAKEN FROM EXTERNAL SOURCES: e.g. websites, llm tools, papers\nALWAYS BE TRANSPARENT WHEN YOU ARE USING LLM TOOLS:\nPlease follow these guidelines:\n\nGeneral Tasks: Create and regularly update a dedicated LLM Transparency page to document how you are using LLM tools.\n\nThis page can serve as a “catch-all” for use cases that don’t involve content creation, such as reformatting your own ideas, commenting code that you wrote, or proofreading text, PDF summarization.\n\nContent Creation: If non-original content (code or text) is generated by an LLM, you must also cite it on specific pages, just like any external source.\n\nFor non-original content, always provide a citation.\nCite the LLM tool after each chunk of text or code it generates, using a BibTeX. For example1"
  },
  {
    "objectID": "instructions/llm-usage.html#acceptable-use-cases",
    "href": "instructions/llm-usage.html#acceptable-use-cases",
    "title": "LLM usage",
    "section": "",
    "text": "Note: Various useful non-LLM research tools can be found here at the following link\n\nTraditional research tools\n\nYou can use LLM tools for the following use cases\n\nAI research tools\nThese include\n\nre-formating text with LLM tools.\nCode explaination “describe what this code is doing in prose”\nText summarization\nProofreading\n\nchatGPT for project brainstorming\nUsing LLM tools to comment your code qualifies as an acceptible use case in this project. You can also use or code re-formatters such as black to increase the readability of your code."
  },
  {
    "objectID": "instructions/llm-usage.html#unacceptable-use-cases",
    "href": "instructions/llm-usage.html#unacceptable-use-cases",
    "title": "LLM usage",
    "section": "",
    "text": "DO NOT use ChatGPT or other LLM tools to write large portions of your text or code.\n\n\nIf it is clear that you have used LLM tools to write large portions of your code or text, your grade will reflect this, likely in the range of 0% to 50% of the total points, depending on the quality of the work. LLM outputs still require significant polishing to fit into a well-written, cohesive narrative. If it is evident that you simply inserted large portions of LLM-generated content into your assignment without taking the time to refine it into a high-quality submission, your grade will reflect this, even if the usage does not rise to the level of plagiarism.\n\n\n\nIn extreme cases,the following actions will occur.\n\nOne-on-One Investigation: You will meet with department faculty for a thorough review of your project. You will be asked to explain your work in detail, including what specific chunks of code do, why you made certain decisions, and how you reached your conclusions.\nReferral to the Honor Council: If, during this meeting, it is determined that you do not have sufficient understanding of the content that you claimed to have created, the case will be documented and sent to the honor council. This can result in a permanent mark on your transcript and may even lead to expulsion from the university."
  },
  {
    "objectID": "instructions/expectations.html",
    "href": "instructions/expectations.html",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Remember, slow and steady wins the race\nMaking steady, incremental progress on a large project generally makes it more manageable. Rushing to throw something together under a tight deadline often turns the process into a nightmare.\n\n\n\nThis is a graduate-level class, so each project should be viewed as specifications, not simple step-by-step requirements. Graduate-level work must be creative, individualized, and of high quality. To achieve an A-level grade, you are expected to exceed the specifications and create unique, novel solutions.\nFor example: If you’re asked to build visualizations to support your data science story, you won’t be told how many or what type of visualizations to create. This is up to you, based on your data and the creativity and quality you want to demonstrate.\nWe want you to move away from expecting someone else to tell you what to do, how to do it, and how much to do. Instead, you’ll adopt a professional approach—reviewing specifications provided in the assignments, determining what’s needed to exceed expectations, and demonstrating professional excellence.\nThere are countless ways to approach the project requirements, so be creative and thoughtful. Instructions outline the minimum requirements, but exceeding them will elevate the quality of your work.\nAutonomy and Critical Thinking:\n\nIn the workplace, step-by-step instructions are rare. You’ll need to interpret broad requirements and deliver professional results. Producing high-quality, accurate work with limited guidance is a key professional skill.\nAt this stage, move away from asking, “Do I have to do XYZ?” Instead, critically analyze challenges. If something is unclear, investigate and break it down fundamentally.\n\nDeveloping problem-solving skills is crucial. While it’s important to work independently for at least 10–20 minutes, if you’re still stuck after 30 minutes, seek help. Being resourceful is important, but knowing when to ask for assistance is equally valuable.\n\n\n\n“Data science” is essentially a collection of useful computational and mathematical skills (statistics, cloud computing, machine learning, coding, etc). However, to maximize your effectiveness, these skills should be applied to a domain of interest (e.g., materials science, finance, healthcare, etc). Focusing and learning about a particular domain will help you specialize and make you more marketable.\nThat beind said, don’t worry about choosing the “perfect” domain—it’s always possible to pivot later, as many of the skills learned, such as problem-solving, critical thinking, and self-education, are transferable across all fields.\n\n\n\nImpact in science refers to the significance and influence of research, often measured by metrics like citations, impact factor of journals, and indices like h-index. These metrics reflect how widely recognized and valuable the work is within the scientific community. Such quanities are used to compare researchers and journals, and are used to determine grant funding and career opportunities.\n\nImpact Factor (IF):\n\nA measure of a journal’s influence, calculated by averaging the number of citations to articles published in the journal over the past two years.\nHigher impact factors indicate a more influential journal.\n\nNumber of Citations:\n\nThe total count of how often a researcher’s work is cited by others, reflecting its influence within the scientific community.\nMore citations generally signal broader recognition or relevance of the research.\n\nh-index:\n\nA metric that measures both productivity and citation impact. An h-index of 10 means a researcher has 10 papers each cited at least 10 times.\nHigher h-index indicates more influential and widely recognized work.\n\ni10-index:\n\nCounts the number of a researcher’s publications with at least 10 citations.\nA straightforward measure of citation impact, commonly used by Google Scholar.\n\nImportance of Citations:\n\nCitations indicate that other researchers find the work valuable for their own research, increasing its perceived credibility and impact in the field.\n\n\n\n\n\nProfessional academic or industrial research is all about discovery, improvement, and novelty. You don’t necessarily need to have a project that acheive the following, but here are some guidelines for what makes “high impact” projects:\nIn no particular order:\n\nNovel computational tools: For example, development of a new Python package to tackle a class of problem which doesn’t have an existing suitable tool.\nCreating more user-friendly tools: For example, there might be a great C++ code, but with no python analogue. Python is easier to use, so if you make a pythonic version of an existing tool, it may get higher adoption, provided it is more or less as efficient to the competitors.\nMore efficient tools or methods: Achieving something 1.25x, 2x, 10x or 10000x faster than existing methods, or creating a new code package that is more efficient than a previous one.\nNovel methods: A completely new way of doing something (e.g. new classification algorithm)\nExisting methods applied to new domains: Using established methods to solve problems in a novel domain, e.g. applying a particular classification methodology to a problem or dataset that no one has applied it to before. Extent of impact obviously depends on the importance of the domain or use-case.\nCreation of novel Data Sets: Provides well-curated, clean datasets that can be used to address important scientific questions or problems.(often more useful if there is an accompanying API)\nNew insights or phenomena: Using data analysis techniques to uncover new insights or patterns that address key questions or problems. For example, discovering overarching governing rules (e.g., differential equations) that describe some observed phenomena.\n\nSolves a Major Problem: Addresses a critical or unresolved issue in the field, offering a breakthrough or significant advancement.\n\nRobust Data and Methodology: Employs sound, validated methodologies and high-quality data to ensure credibility and reliability (i.e. doing something rigorously, correctly, and generally better than the competition).\nInterdisciplinary Impact: Influences multiple fields or areas of study, increasing the breadth of its significance.\nHigh Citation Potential: Likely to be widely cited due to its significance, relevance, and applicability across different areas.\n\nYou can, of course, have multiple of these components in a single project, which will increase its prestige.\nThis is especially true when conducting academic research. Publications need to be novel and make a unique contribution to the body of human knowledge; otherwise, they will not be highly cited or considered particularly important.\n\n\n\n80-20 Rule: This rule of thumb suggests that 80% of results come from 20% of causes. In other words, a small number of key factors drive the majority of outcomes. This principle applies to project management, where a few critical steps or decisions often determine the success of a project.\nFor example, it might take one week of steady work (30-40 hours) to complete 80% of a project, while the final 20% could take an additional four weeks.\n\nProjects tend to expand to fill the time available. No creative project—whether a book, song, poem, or paper—is ever truly 100% complete. There is an asymptotic limit as \\(t \\rightarrow \\infty\\), and true perfection is unattainable. The key is knowing when to “call it done.” This might happen at 95% or 99% completion, but eventually, we all have to stop. Strive to take this project as far as possible, but remember to stop and “call it done” at some point.\n\n\n\n\nVisualizations are a critical component of your portfolio. Use them strategically to support your narrative. The more visual representations of your data, the better—higher-quality visualizations will result in a higher grade. Ensure that all graphics follow best practices:\n\nChoose the right chart type: Match the chart to the data (e.g., bar for categories, line for trends).\nMaintain simplicity: Avoid clutter and focus on the essential message.\nUse appropriate scales: Ensure axes have correct and intuitive scaling to avoid misinterpretation.\nLabel axes clearly: Include meaningful axis labels with units (e.g., “Temperature (°C)” or “Revenue (USD)”).\nInclude descriptive titles: Provide a concise, informative title that explains the visualization’s main takeaway.\nEnsure consistency: Use uniform color schemes, fonts, and styles across all charts in a presentation.\nHighlight key data: Use contrasting colors or annotations to draw attention to important points or trends.\nKeep proportions accurate: Maintain correct data-to-visual size relationships to avoid distortion.\nConsider the audience: Tailor the level of detail and style to the audience’s technical proficiency.\nTest readability: Ensure fonts, colors, and elements are clear and legible in various formats and sizes.\nUse interactivity carefully: Interactive features should add clarity, not complexity, to the visual.\n\n\n\n\n\n\nWhile not required, practice is highly beneficial. It’s also a good habit to write your code from scratch, as this will build your problem-solving skills. You can use the code provided by professors as a reference, but always strive to write your own. Starting with a blank page is a valuable practice.\nTo get comfortable with the methods, review and modify the R and Python codes provided in class. Try applying these to your project data and experiment with creating small toy datasets, such as a CSV file or a text corpus. This helps you understand the structure of the data and what the algorithms are doing.\n\n\n\nIf you have big data, ALWAYS prototype on a small subset of the data, so that your code runs fast so that you can develop quickly, without waiting several minutes for each code cell to run. Do this by including a downsampling hyper-parameter at the beginning of your code, e.g. 0.1. When the code is robust and finalized, you can set the downsampling factor to 1, run it on the complete data set, and let your computer run overnight.\nIt is not a crazy idea to do a “trial run” of the project first from start to finish with a very basic dataset, e.g. penguins,diabetes, or iris. Make sure the “toy” data set is similar to your planned real world data set, for example, if you are planning an NLP project, don’t use a image dataset for your development process.\nThis will have the following benefits:\n\nClarifies Workflow: Understand the complete process from start to finish.\nIdentifies Challenges: Spot potential issues early on.\nValidates Assumptions: Ensure methods and approaches are suitable.\nEnhances Skills: Improve technical skills through practice.\nBuilds Confidence: Familiarity with tools and techniques.\nRefines Methods: Test and optimize analytical strategies.\nEstimates Resources: Better planning for time and resource allocation.\nFacilitates Communication: Clearly convey project goals and outcomes.\nDocuments Process: Create a reference for reproducibility.\nGathers Early Feedback: Obtain input for adjustments before full implementation.\n\nhttps://scikit-learn.org/1.5/datasets/toy_dataset.html\nOnce that is working as a starter code-base you can swap it out for your full data later and start developing further for a more realistic real world project .\n\n\n\n\n\nAlways remember the following Debugging Steps:\n\nStep A: Copy the error message and search it online (Google or similar).\nStep B: Look through forums or documentation to find a solution.\nStep C: Implement the solution.\nStep D: If you’re still stuck, ask for help from classmates, TAs, or professors.\nStep E: Move on to the next issue and repeat the process.\n\n\n(Note: You can also use ChatGPT for debugging, but be cautious as the solutions may sometimes be inaccurate or incomplete.)"
  },
  {
    "objectID": "instructions/expectations.html#get-started-early",
    "href": "instructions/expectations.html#get-started-early",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Remember, slow and steady wins the race\nMaking steady, incremental progress on a large project generally makes it more manageable. Rushing to throw something together under a tight deadline often turns the process into a nightmare."
  },
  {
    "objectID": "instructions/expectations.html#graduate-level-work",
    "href": "instructions/expectations.html#graduate-level-work",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "This is a graduate-level class, so each project should be viewed as specifications, not simple step-by-step requirements. Graduate-level work must be creative, individualized, and of high quality. To achieve an A-level grade, you are expected to exceed the specifications and create unique, novel solutions.\nFor example: If you’re asked to build visualizations to support your data science story, you won’t be told how many or what type of visualizations to create. This is up to you, based on your data and the creativity and quality you want to demonstrate.\nWe want you to move away from expecting someone else to tell you what to do, how to do it, and how much to do. Instead, you’ll adopt a professional approach—reviewing specifications provided in the assignments, determining what’s needed to exceed expectations, and demonstrating professional excellence.\nThere are countless ways to approach the project requirements, so be creative and thoughtful. Instructions outline the minimum requirements, but exceeding them will elevate the quality of your work.\nAutonomy and Critical Thinking:\n\nIn the workplace, step-by-step instructions are rare. You’ll need to interpret broad requirements and deliver professional results. Producing high-quality, accurate work with limited guidance is a key professional skill.\nAt this stage, move away from asking, “Do I have to do XYZ?” Instead, critically analyze challenges. If something is unclear, investigate and break it down fundamentally.\n\nDeveloping problem-solving skills is crucial. While it’s important to work independently for at least 10–20 minutes, if you’re still stuck after 30 minutes, seek help. Being resourceful is important, but knowing when to ask for assistance is equally valuable."
  },
  {
    "objectID": "instructions/expectations.html#the-intersection-of-skills-and-domain-knowledge",
    "href": "instructions/expectations.html#the-intersection-of-skills-and-domain-knowledge",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "“Data science” is essentially a collection of useful computational and mathematical skills (statistics, cloud computing, machine learning, coding, etc). However, to maximize your effectiveness, these skills should be applied to a domain of interest (e.g., materials science, finance, healthcare, etc). Focusing and learning about a particular domain will help you specialize and make you more marketable.\nThat beind said, don’t worry about choosing the “perfect” domain—it’s always possible to pivot later, as many of the skills learned, such as problem-solving, critical thinking, and self-education, are transferable across all fields."
  },
  {
    "objectID": "instructions/expectations.html#what-is-impact",
    "href": "instructions/expectations.html#what-is-impact",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Impact in science refers to the significance and influence of research, often measured by metrics like citations, impact factor of journals, and indices like h-index. These metrics reflect how widely recognized and valuable the work is within the scientific community. Such quanities are used to compare researchers and journals, and are used to determine grant funding and career opportunities.\n\nImpact Factor (IF):\n\nA measure of a journal’s influence, calculated by averaging the number of citations to articles published in the journal over the past two years.\nHigher impact factors indicate a more influential journal.\n\nNumber of Citations:\n\nThe total count of how often a researcher’s work is cited by others, reflecting its influence within the scientific community.\nMore citations generally signal broader recognition or relevance of the research.\n\nh-index:\n\nA metric that measures both productivity and citation impact. An h-index of 10 means a researcher has 10 papers each cited at least 10 times.\nHigher h-index indicates more influential and widely recognized work.\n\ni10-index:\n\nCounts the number of a researcher’s publications with at least 10 citations.\nA straightforward measure of citation impact, commonly used by Google Scholar.\n\nImportance of Citations:\n\nCitations indicate that other researchers find the work valuable for their own research, increasing its perceived credibility and impact in the field."
  },
  {
    "objectID": "instructions/expectations.html#what-makes-a-good-research-project",
    "href": "instructions/expectations.html#what-makes-a-good-research-project",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Professional academic or industrial research is all about discovery, improvement, and novelty. You don’t necessarily need to have a project that acheive the following, but here are some guidelines for what makes “high impact” projects:\nIn no particular order:\n\nNovel computational tools: For example, development of a new Python package to tackle a class of problem which doesn’t have an existing suitable tool.\nCreating more user-friendly tools: For example, there might be a great C++ code, but with no python analogue. Python is easier to use, so if you make a pythonic version of an existing tool, it may get higher adoption, provided it is more or less as efficient to the competitors.\nMore efficient tools or methods: Achieving something 1.25x, 2x, 10x or 10000x faster than existing methods, or creating a new code package that is more efficient than a previous one.\nNovel methods: A completely new way of doing something (e.g. new classification algorithm)\nExisting methods applied to new domains: Using established methods to solve problems in a novel domain, e.g. applying a particular classification methodology to a problem or dataset that no one has applied it to before. Extent of impact obviously depends on the importance of the domain or use-case.\nCreation of novel Data Sets: Provides well-curated, clean datasets that can be used to address important scientific questions or problems.(often more useful if there is an accompanying API)\nNew insights or phenomena: Using data analysis techniques to uncover new insights or patterns that address key questions or problems. For example, discovering overarching governing rules (e.g., differential equations) that describe some observed phenomena.\n\nSolves a Major Problem: Addresses a critical or unresolved issue in the field, offering a breakthrough or significant advancement.\n\nRobust Data and Methodology: Employs sound, validated methodologies and high-quality data to ensure credibility and reliability (i.e. doing something rigorously, correctly, and generally better than the competition).\nInterdisciplinary Impact: Influences multiple fields or areas of study, increasing the breadth of its significance.\nHigh Citation Potential: Likely to be widely cited due to its significance, relevance, and applicability across different areas.\n\nYou can, of course, have multiple of these components in a single project, which will increase its prestige.\nThis is especially true when conducting academic research. Publications need to be novel and make a unique contribution to the body of human knowledge; otherwise, they will not be highly cited or considered particularly important."
  },
  {
    "objectID": "instructions/expectations.html#time-management",
    "href": "instructions/expectations.html#time-management",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "80-20 Rule: This rule of thumb suggests that 80% of results come from 20% of causes. In other words, a small number of key factors drive the majority of outcomes. This principle applies to project management, where a few critical steps or decisions often determine the success of a project.\nFor example, it might take one week of steady work (30-40 hours) to complete 80% of a project, while the final 20% could take an additional four weeks.\n\nProjects tend to expand to fill the time available. No creative project—whether a book, song, poem, or paper—is ever truly 100% complete. There is an asymptotic limit as \\(t \\rightarrow \\infty\\), and true perfection is unattainable. The key is knowing when to “call it done.” This might happen at 95% or 99% completion, but eventually, we all have to stop. Strive to take this project as far as possible, but remember to stop and “call it done” at some point."
  },
  {
    "objectID": "instructions/expectations.html#visualization-guidelines",
    "href": "instructions/expectations.html#visualization-guidelines",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Visualizations are a critical component of your portfolio. Use them strategically to support your narrative. The more visual representations of your data, the better—higher-quality visualizations will result in a higher grade. Ensure that all graphics follow best practices:\n\nChoose the right chart type: Match the chart to the data (e.g., bar for categories, line for trends).\nMaintain simplicity: Avoid clutter and focus on the essential message.\nUse appropriate scales: Ensure axes have correct and intuitive scaling to avoid misinterpretation.\nLabel axes clearly: Include meaningful axis labels with units (e.g., “Temperature (°C)” or “Revenue (USD)”).\nInclude descriptive titles: Provide a concise, informative title that explains the visualization’s main takeaway.\nEnsure consistency: Use uniform color schemes, fonts, and styles across all charts in a presentation.\nHighlight key data: Use contrasting colors or annotations to draw attention to important points or trends.\nKeep proportions accurate: Maintain correct data-to-visual size relationships to avoid distortion.\nConsider the audience: Tailor the level of detail and style to the audience’s technical proficiency.\nTest readability: Ensure fonts, colors, and elements are clear and legible in various formats and sizes.\nUse interactivity carefully: Interactive features should add clarity, not complexity, to the visual."
  },
  {
    "objectID": "instructions/expectations.html#coding",
    "href": "instructions/expectations.html#coding",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "While not required, practice is highly beneficial. It’s also a good habit to write your code from scratch, as this will build your problem-solving skills. You can use the code provided by professors as a reference, but always strive to write your own. Starting with a blank page is a valuable practice.\nTo get comfortable with the methods, review and modify the R and Python codes provided in class. Try applying these to your project data and experiment with creating small toy datasets, such as a CSV file or a text corpus. This helps you understand the structure of the data and what the algorithms are doing.\n\n\n\nIf you have big data, ALWAYS prototype on a small subset of the data, so that your code runs fast so that you can develop quickly, without waiting several minutes for each code cell to run. Do this by including a downsampling hyper-parameter at the beginning of your code, e.g. 0.1. When the code is robust and finalized, you can set the downsampling factor to 1, run it on the complete data set, and let your computer run overnight.\nIt is not a crazy idea to do a “trial run” of the project first from start to finish with a very basic dataset, e.g. penguins,diabetes, or iris. Make sure the “toy” data set is similar to your planned real world data set, for example, if you are planning an NLP project, don’t use a image dataset for your development process.\nThis will have the following benefits:\n\nClarifies Workflow: Understand the complete process from start to finish.\nIdentifies Challenges: Spot potential issues early on.\nValidates Assumptions: Ensure methods and approaches are suitable.\nEnhances Skills: Improve technical skills through practice.\nBuilds Confidence: Familiarity with tools and techniques.\nRefines Methods: Test and optimize analytical strategies.\nEstimates Resources: Better planning for time and resource allocation.\nFacilitates Communication: Clearly convey project goals and outcomes.\nDocuments Process: Create a reference for reproducibility.\nGathers Early Feedback: Obtain input for adjustments before full implementation.\n\nhttps://scikit-learn.org/1.5/datasets/toy_dataset.html\nOnce that is working as a starter code-base you can swap it out for your full data later and start developing further for a more realistic real world project ."
  },
  {
    "objectID": "instructions/expectations.html#debugging",
    "href": "instructions/expectations.html#debugging",
    "title": "General Tips and Expectations",
    "section": "",
    "text": "Always remember the following Debugging Steps:\n\nStep A: Copy the error message and search it online (Google or similar).\nStep B: Look through forums or documentation to find a solution.\nStep C: Implement the solution.\nStep D: If you’re still stuck, ask for help from classmates, TAs, or professors.\nStep E: Move on to the next issue and repeat the process.\n\n\n(Note: You can also use ChatGPT for debugging, but be cautious as the solutions may sometimes be inaccurate or incomplete.)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Predicting Startup Success",
    "section": "",
    "text": "Audio instructions:\nIf you want, you can listen to the instructions:\nSource: Text-to-speech conversion done with Amazon Polly on AWS\nNote: These audio instructions should not be included in your final submission or repository, once you are done wiht them, please delete the files and remove them from the website."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Predicting Startup Success",
    "section": "Getting Started",
    "text": "Getting Started\nTo begin the project, first read the instruction document (click here). This document is also accessible from the navigation bar.\nOnce you’ve completed that, you can proceed with the instructions found throughout the website."
  },
  {
    "objectID": "index.html#what-to-include-on-this-page",
    "href": "index.html#what-to-include-on-this-page",
    "title": "Predicting Startup Success",
    "section": "What to Include on This Page",
    "text": "What to Include on This Page\nThis is the landing page for your project. Content from this page can be reused in sections of your final report.\n\nCreate an “About You” Page\n\nDevelop your “About You” page. You can reuse content from previous assignments.\nYou can include the content here or on a separate page.\n\nIt’s recommended to create one “About You” page for all DSAN projects, with links to your various class projects.\n\n\n\n\nCreate a Landing Page for Your Project\n\nSummarize your topic, its significance, related work, and the questions you plan to explore.\nDraft an introduction with at least 5 research questions. These may evolve as your project progresses, since data science is an iterative process.\nInclude your data science questions on this page.\n\n\n\nLiterature review\nOnce you decide on a topic, you should ALWAYS START WITH A LITERATURE REVIEW, this is particularly important for academic projects.\nThe literature review is the most important part of most projects.\nIt allows you to;\n\n\nDetermine what is already known and what has already been tried, so that you don't re-invent the wheel.\n\n\nIt makes you more of a subject matter expert, allowing you to ask the right questions, target impactful projects, and communicate with other professionals.\n\n\n\nDoing a project that you think will change the world, only to find at the end that a very similar version of your project was already done in the 1980’s, isn’t a great use of time.\n\nIn this section, please do a literature review and cite at least 3 academic publications per group member, and include internal academic citations.\nOptional: Consider using LLM tools to 10X your literature review, e.g. instead of focusing on 3 papers, aim for 30 or more\nBy following these steps, you can 10X the efficiency of your literature review process, gaining more insights while minimizing the time spent on manual reading.\n\nExpand Your Literature Search\nAim to gather a larger pool of papers. Use academic databases (Google Scholar, arXiv, etc.) to find relevant studies and ensure a broad scope.\nSkim the Abstracts\nRead the abstracts of each paper to quickly understand their focus and identify those most relevant to your topic. Prioritize these papers for deeper analysis.\nUse LLM Tools for Summarization\nUpload the selected papers to an LLM tool capable of text summarization. Have it condense the main points of each paper into a concise, manageable summary (e.g., condense hundreds of pages into a 10-page summary). Carefully review this summary to absorb the key insights.\nLeverage Interactive LLM Tools\nUse tools like NotebookLM or other AI-based text digesters to ask specific, targeted questions about the papers:\n\nExample questions:\n\n“In the papers uploaded, did any of them explore XYZ?”\n“Which paper is most closely related to the following project idea: [explain idea]?” These tools will help you quickly extract relevant information without re-reading entire papers."
  },
  {
    "objectID": "index.html#additional-ideas-for-things-to-include",
    "href": "index.html#additional-ideas-for-things-to-include",
    "title": "Predicting Startup Success",
    "section": "Additional Ideas for things to include",
    "text": "Additional Ideas for things to include\n\nAudience: Who is this for? Data professionals, businesses, researchers, or curious readers.\nHeadline: A captivating title introducing the data science theme (e.g., “Unlocking Insights Through Data Stories”).\nIntroduction: A brief, engaging overview of what the website offers (e.g., data-driven stories, insights, or case studies).\nQuestions You Are Addressing: What do you hope to learn?\nMotivation: Explain why this topic matters, highlighting the importance of data in solving real-world problems.\nKey Topics: List the main focus areas (e.g., machine learning, data visualization, predictive modeling).\nUse Cases/Examples: A brief teaser of compelling stories or case studies you’ve worked on.\nCall to Action: Invite visitors to explore the content, follow along, or contact you for more information.\nVisual/Infographic: Add a simple graphic or visual element to make the page more dynamic."
  },
  {
    "objectID": "instructions/github-usage.html",
    "href": "instructions/github-usage.html",
    "title": "GitHub",
    "section": "",
    "text": "Your project will be fully transparent, with all source code hosted on GitHub. This platform will serve as the main repository for your project code, documentation, and website. Proper organization and regular updates are key for effective collaboration and project management.\n\nIMPORTANT: Proficiency in GitHub for collaboration is a valuable addition to your resume. Being able to join a team and immediately contribute by solving problems and adding value is a highly sought-after skill. Now is the time to develop this expertise—embrace Git fully, become proficient, and graduate with a critical skill for your future career.\n\n\n\n\nYou MUST use GitHub Classroom to create your project repository. This ensures TAs can access your code and track your progress.\nClone the repository to your local machine, which will provide a basic directory structure.\n\n\n\n\nYour grade will reflect how effectively you use Git, including:\n\nIncremental progress on the project\nThe frequency and quality of commits\nRepository structure and organization\nAdherence to GitHub guidelines outlined below\n\nEnsure regular commits to GitHub (e.g., git add, git commit, git push) to sync your work and maintain a smooth development process.\n\n\n\nInclude a comprehensive README file that explains the purpose of the project.\nOrganize files logically to make navigation easier for collaborators and TAs.\nEnsure all files are well-documented and the code is easy to follow.\n\n\n\n\n\nCommit frequently with clear, meaningful commit messages that reflect the changes made.\n\nGood commit message example: Added data cleaning script for tabular data\nPoor commit message example: Fix\n\n\n\n\n\n\nDo not store large data files in your repository.\n\nStore raw data in the raw-data folder and processed data in the processed-data folder; these folders should be added to .gitignore.\nTip: Use external storage like Google Drive or GU Domains for large datasets and provide access links within the repository.\n\n\n\n\n\n\nSync your GitHub repository with your GU Domains website before submission deadlines to keep everything up to date. (this should be fully automated)\nEnsure your code repository and website are always in sync, particularly before the final submission, to avoid losing points.\n\n\n\n\n\nProvide clear and thorough documentation for each file and function in your project.\nInclude a README.md that outlines the project purpose, how to run the code, and any necessary dependencies.\n\n\n\n\n\nIf you are working in a group, make full use of GitHub’s collaboration features:\n\nTask Assignment:\n\nAssign tasks using GitHub Issues or Project Boards to keep track of progress.\n\nBranching and Pull Requests:\n\nUse branches for feature development and pull requests for code reviews before merging into the main branch.\n\nCommunication:\n\nMaintain regular communication and conduct code reviews with your teammates to prevent conflicts.\n\nEqual Contribution:\n\nEnsure equal contribution from all team members. Unequal contributions will negatively affect individual grades.\nNote: Team members not contributing equally may be flagged by the group and penalized after review.\n\nContribution Documentation:\n\nDocument each member’s contributions clearly in the collaborators.qmd file, detailing who worked on specific aspects of the project.\n\nCode Reviews:\n\nConduct peer code reviews before merging changes into the main branch to maintain quality and consistency."
  },
  {
    "objectID": "instructions/github-usage.html#repository-setup",
    "href": "instructions/github-usage.html#repository-setup",
    "title": "GitHub",
    "section": "",
    "text": "You MUST use GitHub Classroom to create your project repository. This ensures TAs can access your code and track your progress.\nClone the repository to your local machine, which will provide a basic directory structure."
  },
  {
    "objectID": "instructions/github-usage.html#expectations-for-github-usage",
    "href": "instructions/github-usage.html#expectations-for-github-usage",
    "title": "GitHub",
    "section": "",
    "text": "Your grade will reflect how effectively you use Git, including:\n\nIncremental progress on the project\nThe frequency and quality of commits\nRepository structure and organization\nAdherence to GitHub guidelines outlined below\n\nEnsure regular commits to GitHub (e.g., git add, git commit, git push) to sync your work and maintain a smooth development process.\n\n\n\nInclude a comprehensive README file that explains the purpose of the project.\nOrganize files logically to make navigation easier for collaborators and TAs.\nEnsure all files are well-documented and the code is easy to follow.\n\n\n\n\n\nCommit frequently with clear, meaningful commit messages that reflect the changes made.\n\nGood commit message example: Added data cleaning script for tabular data\nPoor commit message example: Fix\n\n\n\n\n\n\nDo not store large data files in your repository.\n\nStore raw data in the raw-data folder and processed data in the processed-data folder; these folders should be added to .gitignore.\nTip: Use external storage like Google Drive or GU Domains for large datasets and provide access links within the repository.\n\n\n\n\n\n\nSync your GitHub repository with your GU Domains website before submission deadlines to keep everything up to date. (this should be fully automated)\nEnsure your code repository and website are always in sync, particularly before the final submission, to avoid losing points.\n\n\n\n\n\nProvide clear and thorough documentation for each file and function in your project.\nInclude a README.md that outlines the project purpose, how to run the code, and any necessary dependencies."
  },
  {
    "objectID": "instructions/github-usage.html#collaboration-in-groups-if-applicable",
    "href": "instructions/github-usage.html#collaboration-in-groups-if-applicable",
    "title": "GitHub",
    "section": "",
    "text": "If you are working in a group, make full use of GitHub’s collaboration features:\n\nTask Assignment:\n\nAssign tasks using GitHub Issues or Project Boards to keep track of progress.\n\nBranching and Pull Requests:\n\nUse branches for feature development and pull requests for code reviews before merging into the main branch.\n\nCommunication:\n\nMaintain regular communication and conduct code reviews with your teammates to prevent conflicts.\n\nEqual Contribution:\n\nEnsure equal contribution from all team members. Unequal contributions will negatively affect individual grades.\nNote: Team members not contributing equally may be flagged by the group and penalized after review.\n\nContribution Documentation:\n\nDocument each member’s contributions clearly in the collaborators.qmd file, detailing who worked on specific aspects of the project.\n\nCode Reviews:\n\nConduct peer code reviews before merging changes into the main branch to maintain quality and consistency."
  },
  {
    "objectID": "instructions/overview.html",
    "href": "instructions/overview.html",
    "title": "Project instruction:",
    "section": "",
    "text": "Author(s): Dr. H and Gerard Pendleton Thurston the 4th\nNote: You can delete this folder and remove it from the project website once you have read and understood the instructions. It shouldn’t be part of your final submission.\nAudio instructions:\nIf you want, you can listen to the instructions:\n\n\n\n Source: Text-to-speech conversion done with Amazon Polly on AWS \nNote: These audio instructions should not be included in your final submission or repository, once you are done wiht them, please delete the files and remove them from the website."
  },
  {
    "objectID": "instructions/overview.html#python-package-optional",
    "href": "instructions/overview.html#python-package-optional",
    "title": "Project instruction:",
    "section": "Python package (optional)",
    "text": "Python package (optional)\nThis is an optional component of the project, if you’d like, you can create a dedicated Python package for your project. The source folder for this package should be included in the root of your repository, and it can be imported into your processing scripts used in the various technical-details sections. If you create a package, it should be well-documented, with an additional tab on the navigation bar for the package documentation.\nWhile a package would typically have its own GitHub repository, for this project, please include it within the same repository.\nThe skeleton for the package is not provided in the repo, but you can recycle what you created in past assignments."
  },
  {
    "objectID": "instructions/overview.html#select-a-broad-topic-area",
    "href": "instructions/overview.html#select-a-broad-topic-area",
    "title": "Project instruction:",
    "section": "Select a broad topic area",
    "text": "Select a broad topic area\nStart by selecting a broad topic area.\nHere are some examples:\n\nBio and Health\n\nClimate\n\nFinance and Economics\n\nPublic Policy\n\nMaterials Discovery\n\nTransportation\n\nEducation\n\nCrime and Punishment\n\nPolitics and Government\n\nZoology and Botany\n\nSocial Phenomena"
  },
  {
    "objectID": "instructions/overview.html#narrow-your-focus",
    "href": "instructions/overview.html#narrow-your-focus",
    "title": "Project instruction:",
    "section": "Narrow your focus",
    "text": "Narrow your focus\n\nNarrow your focus to a topic that can realistically be addressed in a data driven way.\n\ne.g. Study the effect of climate change on extreme weather\nAvoid commonly used topics from Kaggle.\n\nClaim your topic in the “project topic page in the shared documeent”\n\nclick here to claim your topic\n\n\nEven if multiple students choose similar topics, each portfolio must be original. Portfolios that are too similar will be reviewed for plagiarism and may result in Honor Council violation."
  },
  {
    "objectID": "instructions/overview.html#data-science-questions",
    "href": "instructions/overview.html#data-science-questions",
    "title": "Project instruction:",
    "section": "Data Science Questions",
    "text": "Data Science Questions\nThe data science life cycle starts with well-posed questions, similar to the scientific method. A data science question is a broad idea that can be broken down into 5 to 10 smaller questions, guiding your investigation.\n\n“What effect is climate change having on frequency of extreme weather events? e.g hurricane, drought, forest fires, etc”\n\nHere are some additional example questions:\n\nHealth & Medicine\n\nWhat factors predict heart disease across different age groups?\n\nHow does cancer treatment effectiveness vary by demographics?\n\nCan wearables predict the onset of diabetes?\n\nClimate & Environment\n\nWhat is the impact of deforestation on regional climates?\n\nEducation\n\nHow do socioeconomic factors affect student performance?\n\nWhat is the impact of remote learning post-pandemic?\n\nSocial Science & Public Policy\n\nHow does income inequality correlate with crime rates?\n\nWhat factors influence voter turnout?\n\nFinance & Economics\n\nWhat indicators predict stock market crashes?\n\nHow does inflation impact consumer spending?\n\nTransportation\n\nHow has ride-sharing impacted taxi services?\n\nWhat are the busiest transportation hubs, and how can congestion be reduced?\n\nCrime & Law Enforcement\n\nWhat factors predict recidivism in former inmates?\n\nHow do different policing strategies impact crime rates?\n\nSports & Entertainment\n\nWhat factors predict an athlete’s long-term performance?\n\nCan machine learning predict sports match outcomes?\n\nTechnology & Social Media\n\nHow do online reviews impact product sales?\n\nWhat strategies drive viral social media campaigns?\n\n\nChoose a topic you’re passionate about, and develop creative, “outside-the-box” questions to guide your project throughout the course."
  },
  {
    "objectID": "instructions/overview.html#repository-setup",
    "href": "instructions/overview.html#repository-setup",
    "title": "Project instruction:",
    "section": "Repository Setup",
    "text": "Repository Setup\n\nYou MUST use GitHub Classroom to create your project repository. This ensures TAs can access your code and track your progress.\nClone the repository to your local machine, which will provide a basic directory structure."
  },
  {
    "objectID": "instructions/overview.html#expectations-for-github-usage",
    "href": "instructions/overview.html#expectations-for-github-usage",
    "title": "Project instruction:",
    "section": "Expectations for GitHub Usage",
    "text": "Expectations for GitHub Usage\nYour grade will reflect how effectively you use Git, including:\n\nIncremental progress on the project\nThe frequency and quality of commits\nRepository structure and organization\nAdherence to GitHub guidelines outlined below\n\nEnsure regular commits to GitHub (e.g., git add, git commit, git push) to sync your work and maintain a smooth development process.\n\n1. Use a Logical Repository Structure\n\nInclude a comprehensive README file that explains the purpose of the project.\nOrganize files logically to make navigation easier for collaborators and TAs.\nEnsure all files are well-documented and the code is easy to follow.\n\n\n\n2. Commit Regularly\n\nCommit frequently with clear, meaningful commit messages that reflect the changes made.\n\nGood commit message example: Added data cleaning script for tabular data\nPoor commit message example: Fix\n\n\n\n\n3. Data Storage\n\nDo not store large data files in your repository.\n\nStore raw data in the raw-data folder and processed data in the processed-data folder; these folders should be added to .gitignore.\nTip: Use external storage like Google Drive or GU Domains for large datasets and provide access links within the repository.\n\n\n\n\n4. Syncing with GU Domains\n\nSync your GitHub repository with your GU Domains website before submission deadlines to keep everything up to date. (this should be fully automated)\nEnsure your code repository and website are always in sync, particularly before the final submission, to avoid losing points.\n\n\n\n5. Code Documentation\n\nProvide clear and thorough documentation for each file and function in your project.\nInclude a README.md that outlines the project purpose, how to run the code, and any necessary dependencies."
  },
  {
    "objectID": "instructions/overview.html#collaboration-in-groups-if-applicable",
    "href": "instructions/overview.html#collaboration-in-groups-if-applicable",
    "title": "Project instruction:",
    "section": "Collaboration in Groups (If Applicable)",
    "text": "Collaboration in Groups (If Applicable)\nIf you are working in a group, make full use of GitHub’s collaboration features:\n\nTask Assignment:\n\nAssign tasks using GitHub Issues or Project Boards to keep track of progress.\n\nBranching and Pull Requests:\n\nUse branches for feature development and pull requests for code reviews before merging into the main branch.\n\nCommunication:\n\nMaintain regular communication and conduct code reviews with your teammates to prevent conflicts.\n\nEqual Contribution:\n\nEnsure equal contribution from all team members. Unequal contributions will negatively affect individual grades.\nNote: Team members not contributing equally may be flagged by the group and penalized after review.\n\nContribution Documentation:\n\nDocument each member’s contributions clearly in the collaborators.qmd file, detailing who worked on specific aspects of the project.\n\nCode Reviews:\n\nConduct peer code reviews before merging changes into the main branch to maintain quality and consistency."
  },
  {
    "objectID": "instructions/overview.html#website-development",
    "href": "instructions/overview.html#website-development",
    "title": "Project instruction:",
    "section": "Website Development",
    "text": "Website Development\nIt is required that you build your website with Quarto."
  },
  {
    "objectID": "instructions/overview.html#website-hosting",
    "href": "instructions/overview.html#website-hosting",
    "title": "Project instruction:",
    "section": "Website Hosting",
    "text": "Website Hosting\nYou MUST host your website on the Georgetown Domains web space.\nNo exceptions. You may NOT use anything other than Georgetown Domains to host your website. For example, no RPubs, WordPress, Squarespace, or any other website development toolset. Failure to comply with this rule will result in a ZERO."
  },
  {
    "objectID": "instructions/overview.html#the-two-audiences",
    "href": "instructions/overview.html#the-two-audiences",
    "title": "Project instruction:",
    "section": "The two audiences",
    "text": "The two audiences\nKnowing your audience in data science writing is crucial because it shapes how you present information. Technical stakeholders may require detailed explanations of methodologies, while non-technical audiences need clear, simplified insights and data-driven conclusions. Tailoring your message ensures your analysis is both understandable and impactful, driving informed decision-making.\n\nExamples of technical audiences include data scientists, software engineers, and IT professionals. These individuals expect detailed explanations of models, algorithms, methodologies, or system architectures, and they’re comfortable with technical jargon, such as discussing hyperparameters, programming frameworks, or machine learning techniques.\nNon-technical audiences include executives, marketing teams, and clients. They prioritize high-level insights, actionable results, and visualizations that convey the impact of data without requiring an understanding of complex methods. For instance, a CEO may want to know how a model affects business strategy or revenue, without diving into the underlying technical details.\n\nIn this project you will cater to both audiences. This is done by having regions of your website for both audiences (see website struture)"
  },
  {
    "objectID": "instructions/overview.html#get-started-early",
    "href": "instructions/overview.html#get-started-early",
    "title": "Project instruction:",
    "section": "Get started early",
    "text": "Get started early\nRemember, slow and steady wins the race\nMaking steady, incremental progress on a large project generally makes it more manageable. Rushing to throw something together under a tight deadline often turns the process into a nightmare."
  },
  {
    "objectID": "instructions/overview.html#graduate-level-work",
    "href": "instructions/overview.html#graduate-level-work",
    "title": "Project instruction:",
    "section": "Graduate level work",
    "text": "Graduate level work\nThis is a graduate-level class, so each project should be viewed as specifications, not simple step-by-step requirements. Graduate-level work must be creative, individualized, and of high quality. To achieve an A-level grade, you are expected to exceed the specifications and create unique, novel solutions.\nFor example: If you’re asked to build visualizations to support your data science story, you won’t be told how many or what type of visualizations to create. This is up to you, based on your data and the creativity and quality you want to demonstrate.\nWe want you to move away from expecting someone else to tell you what to do, how to do it, and how much to do. Instead, you’ll adopt a professional approach—reviewing specifications provided in the assignments, determining what’s needed to exceed expectations, and demonstrating professional excellence.\nThere are countless ways to approach the project requirements, so be creative and thoughtful. Instructions outline the minimum requirements, but exceeding them will elevate the quality of your work.\nAutonomy and Critical Thinking:\n\nIn the workplace, step-by-step instructions are rare. You’ll need to interpret broad requirements and deliver professional results. Producing high-quality, accurate work with limited guidance is a key professional skill.\nAt this stage, move away from asking, “Do I have to do XYZ?” Instead, critically analyze challenges. If something is unclear, investigate and break it down fundamentally.\n\nDeveloping problem-solving skills is crucial. While it’s important to work independently for at least 10–20 minutes, if you’re still stuck after 30 minutes, seek help. Being resourceful is important, but knowing when to ask for assistance is equally valuable."
  },
  {
    "objectID": "instructions/overview.html#the-intersection-of-skills-and-domain-knowledge",
    "href": "instructions/overview.html#the-intersection-of-skills-and-domain-knowledge",
    "title": "Project instruction:",
    "section": "The intersection of skills and domain knowledge",
    "text": "The intersection of skills and domain knowledge\n“Data science” is essentially a collection of useful computational and mathematical skills (statistics, cloud computing, machine learning, coding, etc). However, to maximize your effectiveness, these skills should be applied to a domain of interest (e.g., materials science, finance, healthcare, etc). Focusing and learning about a particular domain will help you specialize and make you more marketable.\nThat beind said, don’t worry about choosing the “perfect” domain—it’s always possible to pivot later, as many of the skills learned, such as problem-solving, critical thinking, and self-education, are transferable across all fields."
  },
  {
    "objectID": "instructions/overview.html#what-is-impact",
    "href": "instructions/overview.html#what-is-impact",
    "title": "Project instruction:",
    "section": "What is “impact”?",
    "text": "What is “impact”?\nImpact in science refers to the significance and influence of research, often measured by metrics like citations, impact factor of journals, and indices like h-index. These metrics reflect how widely recognized and valuable the work is within the scientific community. Such quanities are used to compare researchers and journals, and are used to determine grant funding and career opportunities.\n\nImpact Factor (IF):\n\nA measure of a journal’s influence, calculated by averaging the number of citations to articles published in the journal over the past two years.\nHigher impact factors indicate a more influential journal.\n\nNumber of Citations:\n\nThe total count of how often a researcher’s work is cited by others, reflecting its influence within the scientific community.\nMore citations generally signal broader recognition or relevance of the research.\n\nh-index:\n\nA metric that measures both productivity and citation impact. An h-index of 10 means a researcher has 10 papers each cited at least 10 times.\nHigher h-index indicates more influential and widely recognized work.\n\ni10-index:\n\nCounts the number of a researcher’s publications with at least 10 citations.\nA straightforward measure of citation impact, commonly used by Google Scholar.\n\nImportance of Citations:\n\nCitations indicate that other researchers find the work valuable for their own research, increasing its perceived credibility and impact in the field."
  },
  {
    "objectID": "instructions/overview.html#what-makes-a-good-research-project",
    "href": "instructions/overview.html#what-makes-a-good-research-project",
    "title": "Project instruction:",
    "section": "What makes a good research project?",
    "text": "What makes a good research project?\nProfessional academic or industrial research is all about discovery, improvement, and novelty. You don’t necessarily need to have a project that acheive the following, but here are some guidelines for what makes “high impact” projects:\nIn no particular order:\n\nNovel computational tools: For example, development of a new Python package to tackle a class of problem which doesn’t have an existing suitable tool.\nCreating more user-friendly tools: For example, there might be a great C++ code, but with no python analogue. Python is easier to use, so if you make a pythonic version of an existing tool, it may get higher adoption, provided it is more or less as efficient to the competitors.\nMore efficient tools or methods: Achieving something 1.25x, 2x, 10x or 10000x faster than existing methods, or creating a new code package that is more efficient than a previous one.\nNovel methods: A completely new way of doing something (e.g. new classification algorithm)\nExisting methods applied to new domains: Using established methods to solve problems in a novel domain, e.g. applying a particular classification methodology to a problem or dataset that no one has applied it to before. Extent of impact obviously depends on the importance of the domain or use-case.\nCreation of novel Data Sets: Provides well-curated, clean datasets that can be used to address important scientific questions or problems.(often more useful if there is an accompanying API)\nNew insights or phenomena: Using data analysis techniques to uncover new insights or patterns that address key questions or problems. For example, discovering overarching governing rules (e.g., differential equations) that describe some observed phenomena.\n\nSolves a Major Problem: Addresses a critical or unresolved issue in the field, offering a breakthrough or significant advancement.\n\nRobust Data and Methodology: Employs sound, validated methodologies and high-quality data to ensure credibility and reliability (i.e. doing something rigorously, correctly, and generally better than the competition).\nInterdisciplinary Impact: Influences multiple fields or areas of study, increasing the breadth of its significance.\nHigh Citation Potential: Likely to be widely cited due to its significance, relevance, and applicability across different areas.\n\nYou can, of course, have multiple of these components in a single project, which will increase its prestige.\nThis is especially true when conducting academic research. Publications need to be novel and make a unique contribution to the body of human knowledge; otherwise, they will not be highly cited or considered particularly important."
  },
  {
    "objectID": "instructions/overview.html#time-management",
    "href": "instructions/overview.html#time-management",
    "title": "Project instruction:",
    "section": "Time management",
    "text": "Time management\n80-20 Rule: This rule of thumb suggests that 80% of results come from 20% of causes. In other words, a small number of key factors drive the majority of outcomes. This principle applies to project management, where a few critical steps or decisions often determine the success of a project.\nFor example, it might take one week of steady work (30-40 hours) to complete 80% of a project, while the final 20% could take an additional four weeks.\n\nProjects tend to expand to fill the time available. No creative project—whether a book, song, poem, or paper—is ever truly 100% complete. There is an asymptotic limit as \\(t \\rightarrow \\infty\\), and true perfection is unattainable. The key is knowing when to “call it done.” This might happen at 95% or 99% completion, but eventually, we all have to stop. Strive to take this project as far as possible, but remember to stop and “call it done” at some point."
  },
  {
    "objectID": "instructions/overview.html#visualization-guidelines",
    "href": "instructions/overview.html#visualization-guidelines",
    "title": "Project instruction:",
    "section": "Visualization guidelines",
    "text": "Visualization guidelines\nVisualizations are a critical component of your portfolio. Use them strategically to support your narrative. The more visual representations of your data, the better—higher-quality visualizations will result in a higher grade. Ensure that all graphics follow best practices:\n\nChoose the right chart type: Match the chart to the data (e.g., bar for categories, line for trends).\nMaintain simplicity: Avoid clutter and focus on the essential message.\nUse appropriate scales: Ensure axes have correct and intuitive scaling to avoid misinterpretation.\nLabel axes clearly: Include meaningful axis labels with units (e.g., “Temperature (°C)” or “Revenue (USD)”).\nInclude descriptive titles: Provide a concise, informative title that explains the visualization’s main takeaway.\nEnsure consistency: Use uniform color schemes, fonts, and styles across all charts in a presentation.\nHighlight key data: Use contrasting colors or annotations to draw attention to important points or trends.\nKeep proportions accurate: Maintain correct data-to-visual size relationships to avoid distortion.\nConsider the audience: Tailor the level of detail and style to the audience’s technical proficiency.\nTest readability: Ensure fonts, colors, and elements are clear and legible in various formats and sizes.\nUse interactivity carefully: Interactive features should add clarity, not complexity, to the visual."
  },
  {
    "objectID": "instructions/overview.html#coding",
    "href": "instructions/overview.html#coding",
    "title": "Project instruction:",
    "section": "Coding",
    "text": "Coding\n\nPractice First\nWhile not required, practice is highly beneficial. It’s also a good habit to write your code from scratch, as this will build your problem-solving skills. You can use the code provided by professors as a reference, but always strive to write your own. Starting with a blank page is a valuable practice.\nTo get comfortable with the methods, review and modify the R and Python codes provided in class. Try applying these to your project data and experiment with creating small toy datasets, such as a CSV file or a text corpus. This helps you understand the structure of the data and what the algorithms are doing.\n\n\nPrototype and develop on a small data set\nIf you have big data, ALWAYS prototype on a small subset of the data, so that your code runs fast so that you can develop quickly, without waiting several minutes for each code cell to run. Do this by including a downsampling hyper-parameter at the beginning of your code, e.g. 0.1. When the code is robust and finalized, you can set the downsampling factor to 1, run it on the complete data set, and let your computer run overnight.\nIt is not a crazy idea to do a “trial run” of the project first from start to finish with a very basic dataset, e.g. penguins,diabetes, or iris. Make sure the “toy” data set is similar to your planned real world data set, for example, if you are planning an NLP project, don’t use a image dataset for your development process.\nThis will have the following benefits:\n\nClarifies Workflow: Understand the complete process from start to finish.\nIdentifies Challenges: Spot potential issues early on.\nValidates Assumptions: Ensure methods and approaches are suitable.\nEnhances Skills: Improve technical skills through practice.\nBuilds Confidence: Familiarity with tools and techniques.\nRefines Methods: Test and optimize analytical strategies.\nEstimates Resources: Better planning for time and resource allocation.\nFacilitates Communication: Clearly convey project goals and outcomes.\nDocuments Process: Create a reference for reproducibility.\nGathers Early Feedback: Obtain input for adjustments before full implementation.\n\nhttps://scikit-learn.org/1.5/datasets/toy_dataset.html\nOnce that is working as a starter code-base you can swap it out for your full data later and start developing further for a more realistic real world project ."
  },
  {
    "objectID": "instructions/overview.html#debugging",
    "href": "instructions/overview.html#debugging",
    "title": "Project instruction:",
    "section": "Debugging",
    "text": "Debugging\n\nAlways remember the following Debugging Steps:\n\nStep A: Copy the error message and search it online (Google or similar).\nStep B: Look through forums or documentation to find a solution.\nStep C: Implement the solution.\nStep D: If you’re still stuck, ask for help from classmates, TAs, or professors.\nStep E: Move on to the next issue and repeat the process.\n\n\n(Note: You can also use ChatGPT for debugging, but be cautious as the solutions may sometimes be inaccurate or incomplete.)"
  },
  {
    "objectID": "instructions/overview.html#file-types",
    "href": "instructions/overview.html#file-types",
    "title": "Project instruction:",
    "section": "File Types",
    "text": "File Types\nYou can decide when to use .qmd vs .ipynb for structuring your code, but I recommend the following guidelines:\n\nIf the file contains any code (either in R or Python), ALWAYS use .ipynb.\nDo not mix R and Python in the same notebook.\nIf the file is purely markdown without code, use .qmd.\nUse Quarto includes to modularize your content (see below for more details). This is also demonstrated in the project skeleton."
  },
  {
    "objectID": "instructions/overview.html#quarto-includes",
    "href": "instructions/overview.html#quarto-includes",
    "title": "Project instruction:",
    "section": "Quarto Includes",
    "text": "Quarto Includes\nQuarto includes (e.g., {{&lt; include _content.qmd &gt;}}) are highly recommended for modularizing and organizing your content. While optional, they offer several advantages.\nNote: You can include a .qmd file in a .ipynb file, but not vice versa.\n\nWhy Use Quarto Includes?\n\nModularization: Breaking your project into smaller, reusable chunks simplifies the management of complex documents. You can work on specific sections without altering the entire project.\nReusability: Includes allow you to reuse content blocks across multiple documents, making them ideal for repetitive sections like headers or footers.\nConsistency: By using includes, you ensure uniformity across your documents. Updating an include file will automatically apply the changes wherever it’s used.\nSimplifies Collaboration: In team settings, includes allow different contributors to work on separate sections simultaneously, reducing merge conflicts and making the project easier to maintain.\nImproved Organization: Includes help keep your main files clean and focused by loading content from separate, well-organized files. This makes your project more manageable and easier to navigate."
  },
  {
    "objectID": "instructions/overview.html#citation",
    "href": "instructions/overview.html#citation",
    "title": "Project instruction:",
    "section": "Citation",
    "text": "Citation\nALWAY CITE CONTENT OR IDEAS TAKEN FROM EXTERNAL SOURCES: e.g. websites, llm tools, papers\nALWAYS BE TRANSPARENT WHEN YOU ARE USING LLM TOOLS:\nPlease follow these guidelines:\n\nGeneral Tasks: Create and regularly update a dedicated LLM Transparency page to document how you are using LLM tools.\n\nThis page can serve as a “catch-all” for use cases that don’t involve content creation, such as reformatting your own ideas, commenting code that you wrote, or proofreading text, PDF summarization.\n\nContent Creation: If non-original content (code or text) is generated by an LLM, you must also cite it on specific pages, just like any external source.\n\nFor non-original content, always provide a citation.\nCite the LLM tool after each chunk of text or code it generates, using a BibTeX. For example1"
  },
  {
    "objectID": "instructions/overview.html#acceptable-use-cases",
    "href": "instructions/overview.html#acceptable-use-cases",
    "title": "Project instruction:",
    "section": "Acceptable use cases",
    "text": "Acceptable use cases\nNote: Various useful non-LLM research tools can be found here at the following link\n\nTraditional research tools\n\nYou can use LLM tools for the following use cases\n\nAI research tools\nThese include\n\nre-formating text with LLM tools.\nCode explaination “describe what this code is doing in prose”\nText summarization\nProofreading\n\nchatGPT for project brainstorming\nUsing LLM tools to comment your code qualifies as an acceptible use case in this project. You can also use or code re-formatters such as black to increase the readability of your code."
  },
  {
    "objectID": "instructions/overview.html#unacceptable-use-cases",
    "href": "instructions/overview.html#unacceptable-use-cases",
    "title": "Project instruction:",
    "section": "Unacceptable use cases",
    "text": "Unacceptable use cases\nDO NOT use ChatGPT or other LLM tools to write large portions of your text or code.\n\nEffect on grade\nIf it is clear that you have used LLM tools to write large portions of your code or text, your grade will reflect this, likely in the range of 0% to 50% of the total points, depending on the quality of the work. LLM outputs still require significant polishing to fit into a well-written, cohesive narrative. If it is evident that you simply inserted large portions of LLM-generated content into your assignment without taking the time to refine it into a high-quality submission, your grade will reflect this, even if the usage does not rise to the level of plagiarism.\n\n\nPlagiarism investigation\nIn extreme cases,the following actions will occur.\n\nOne-on-One Investigation: You will meet with department faculty for a thorough review of your project. You will be asked to explain your work in detail, including what specific chunks of code do, why you made certain decisions, and how you reached your conclusions.\nReferral to the Honor Council: If, during this meeting, it is determined that you do not have sufficient understanding of the content that you claimed to have created, the case will be documented and sent to the honor council. This can result in a permanent mark on your transcript and may even lead to expulsion from the university."
  },
  {
    "objectID": "instructions/topic-selection.html",
    "href": "instructions/topic-selection.html",
    "title": "Topic selection",
    "section": "",
    "text": "Start by selecting a broad topic area.\nHere are some examples:\n\nBio and Health\n\nClimate\n\nFinance and Economics\n\nPublic Policy\n\nMaterials Discovery\n\nTransportation\n\nEducation\n\nCrime and Punishment\n\nPolitics and Government\n\nZoology and Botany\n\nSocial Phenomena\n\n\n\n\n\nNarrow your focus to a topic that can realistically be addressed in a data driven way.\n\ne.g. Study the effect of climate change on extreme weather\nAvoid commonly used topics from Kaggle.\n\nClaim your topic in the “project topic page in the shared documeent”\n\nclick here to claim your topic\n\n\nEven if multiple students choose similar topics, each portfolio must be original. Portfolios that are too similar will be reviewed for plagiarism and may result in Honor Council violation.\n\n\n\nThe data science life cycle starts with well-posed questions, similar to the scientific method. A data science question is a broad idea that can be broken down into 5 to 10 smaller questions, guiding your investigation.\n\n“What effect is climate change having on frequency of extreme weather events? e.g hurricane, drought, forest fires, etc”\n\nHere are some additional example questions:\n\nHealth & Medicine\n\nWhat factors predict heart disease across different age groups?\n\nHow does cancer treatment effectiveness vary by demographics?\n\nCan wearables predict the onset of diabetes?\n\nClimate & Environment\n\nWhat is the impact of deforestation on regional climates?\n\nEducation\n\nHow do socioeconomic factors affect student performance?\n\nWhat is the impact of remote learning post-pandemic?\n\nSocial Science & Public Policy\n\nHow does income inequality correlate with crime rates?\n\nWhat factors influence voter turnout?\n\nFinance & Economics\n\nWhat indicators predict stock market crashes?\n\nHow does inflation impact consumer spending?\n\nTransportation\n\nHow has ride-sharing impacted taxi services?\n\nWhat are the busiest transportation hubs, and how can congestion be reduced?\n\nCrime & Law Enforcement\n\nWhat factors predict recidivism in former inmates?\n\nHow do different policing strategies impact crime rates?\n\nSports & Entertainment\n\nWhat factors predict an athlete’s long-term performance?\n\nCan machine learning predict sports match outcomes?\n\nTechnology & Social Media\n\nHow do online reviews impact product sales?\n\nWhat strategies drive viral social media campaigns?\n\n\nChoose a topic you’re passionate about, and develop creative, “outside-the-box” questions to guide your project throughout the course."
  },
  {
    "objectID": "instructions/topic-selection.html#select-a-broad-topic-area",
    "href": "instructions/topic-selection.html#select-a-broad-topic-area",
    "title": "Topic selection",
    "section": "",
    "text": "Start by selecting a broad topic area.\nHere are some examples:\n\nBio and Health\n\nClimate\n\nFinance and Economics\n\nPublic Policy\n\nMaterials Discovery\n\nTransportation\n\nEducation\n\nCrime and Punishment\n\nPolitics and Government\n\nZoology and Botany\n\nSocial Phenomena"
  },
  {
    "objectID": "instructions/topic-selection.html#narrow-your-focus",
    "href": "instructions/topic-selection.html#narrow-your-focus",
    "title": "Topic selection",
    "section": "",
    "text": "Narrow your focus to a topic that can realistically be addressed in a data driven way.\n\ne.g. Study the effect of climate change on extreme weather\nAvoid commonly used topics from Kaggle.\n\nClaim your topic in the “project topic page in the shared documeent”\n\nclick here to claim your topic\n\n\nEven if multiple students choose similar topics, each portfolio must be original. Portfolios that are too similar will be reviewed for plagiarism and may result in Honor Council violation."
  },
  {
    "objectID": "instructions/topic-selection.html#data-science-questions",
    "href": "instructions/topic-selection.html#data-science-questions",
    "title": "Topic selection",
    "section": "",
    "text": "The data science life cycle starts with well-posed questions, similar to the scientific method. A data science question is a broad idea that can be broken down into 5 to 10 smaller questions, guiding your investigation.\n\n“What effect is climate change having on frequency of extreme weather events? e.g hurricane, drought, forest fires, etc”\n\nHere are some additional example questions:\n\nHealth & Medicine\n\nWhat factors predict heart disease across different age groups?\n\nHow does cancer treatment effectiveness vary by demographics?\n\nCan wearables predict the onset of diabetes?\n\nClimate & Environment\n\nWhat is the impact of deforestation on regional climates?\n\nEducation\n\nHow do socioeconomic factors affect student performance?\n\nWhat is the impact of remote learning post-pandemic?\n\nSocial Science & Public Policy\n\nHow does income inequality correlate with crime rates?\n\nWhat factors influence voter turnout?\n\nFinance & Economics\n\nWhat indicators predict stock market crashes?\n\nHow does inflation impact consumer spending?\n\nTransportation\n\nHow has ride-sharing impacted taxi services?\n\nWhat are the busiest transportation hubs, and how can congestion be reduced?\n\nCrime & Law Enforcement\n\nWhat factors predict recidivism in former inmates?\n\nHow do different policing strategies impact crime rates?\n\nSports & Entertainment\n\nWhat factors predict an athlete’s long-term performance?\n\nCan machine learning predict sports match outcomes?\n\nTechnology & Social Media\n\nHow do online reviews impact product sales?\n\nWhat strategies drive viral social media campaigns?\n\n\nChoose a topic you’re passionate about, and develop creative, “outside-the-box” questions to guide your project throughout the course."
  },
  {
    "objectID": "report/report.html",
    "href": "report/report.html",
    "title": "Final Report",
    "section": "",
    "text": "Audio instructions:\nIf you want, you can listen to the instructions:\n\n\n\n Source: Text-to-speech conversion done with Amazon Polly on AWS \nNote: These audio instructions should not be included in your final submission or repository, once you are done wiht them, please delete the files and remove them from the website.\nThis report is designed for a non-technical audience (e.g., the general public, executives, marketing teams, or clients), focusing on high-level insights, actionable results, and visualizations to convey the impact without requiring technical knowledge. The goal is to highlight how a model affects business strategy or revenue without diving into complex methods.\n\n\n\nClear Purpose: Define the core message or objective early on.\nKnow Your Audience: Adjust language, tone, and detail based on the audience’s understanding.\nStrong Opening: Start with a hook that sets context and stakes.\nLogical Flow: Structure with a clear beginning, middle, and end.\nKey Insights: Highlight the most important points; avoid unnecessary details or jargon.\nData Support: Use data to enhance the narrative without overwhelming.\nVisuals: Incorporate charts to simplify ideas and engage the audience.\nActionable Takeaways: Conclude with recommendations or next steps.\nAuthenticity: Use storytelling to make the content engaging and relatable.\nRevise: Edit for clarity and impact, removing unnecessary content.\n\n\n\n\nThese are just examples, you can use any structure that is suitable for your project.\n\n\n\nIntroduction: Provide an accessible overview and explain the motivation and importance of the research. Example: “This study explores how climate change affects local ecosystems, vital for wildlife conservation.”\nObjective: Clearly define the research goal and relate it to real-world challenges. Example: “We aim to analyze the effects of air pollution on public health in urban areas.”\nKey Findings: Present insights without technical terms, focusing on the impact. Example: “Air pollution increases the risk of respiratory diseases by 20%.”\nMethodology Overview: Briefly explain relevant methods. Example: “We analyzed air quality data from 50 cities and surveyed 10,000 residents.”\nVisualizations: Use simple graphs and infographics to convey findings. Example: A map showing pollution levels and a bar chart of health risks.\nSocietal Implications: Highlight the broader impact. Example: “This study highlights the need for better air quality policies.”\nCall to Action: Offer recommendations based on findings. Example: “We recommend city planners invest in green spaces.”\nConclusion: Recap the main findings and societal impact. Example: “Understanding pollution’s health impacts will help create healthier cities.”\n\n\n\n\n\nExecutive Summary: Summarize key findings and their relevance to business goals. Example: “This report predicts customer churn and offers strategies to reduce churn by 15%.”\nObjective: Define the problem or question addressed. Example: “This project aims to identify the drivers of customer churn.”\nKey Insights: Present the most important, actionable insights. Example: “Customers who interact with support twice within 30 days are 25% less likely to churn.”\nVisualizations: Use clear graphs to convey key insights. Example: A bar chart showing churn likelihood based on engagement.\nBusiness Implications: Explain how findings impact business outcomes and offer specific recommendations. Example: “Focus retention efforts on low-engagement customers.”\nRecommendations: Provide clear, actionable steps with projections. Example: “Implement an automated retention campaign, reducing churn by 10%.”\nConclusion: Summarize findings and suggest next steps. Example: “Addressing churn drivers can reduce loss and improve profitability.”\nAppendix (Optional): Additional charts or explanations for further insights.\n\n\n\n\n\n\nSimplicity: Avoid jargon; focus on business-relevant insights.\nVisual Focus: Prioritize charts and graphs over dense text.\nEmphasize Impact: Always link data insights to business outcomes."
  },
  {
    "objectID": "report/report.html#guidelines-for-creating-a-good-narrative",
    "href": "report/report.html#guidelines-for-creating-a-good-narrative",
    "title": "Final Report",
    "section": "",
    "text": "Clear Purpose: Define the core message or objective early on.\nKnow Your Audience: Adjust language, tone, and detail based on the audience’s understanding.\nStrong Opening: Start with a hook that sets context and stakes.\nLogical Flow: Structure with a clear beginning, middle, and end.\nKey Insights: Highlight the most important points; avoid unnecessary details or jargon.\nData Support: Use data to enhance the narrative without overwhelming.\nVisuals: Incorporate charts to simplify ideas and engage the audience.\nActionable Takeaways: Conclude with recommendations or next steps.\nAuthenticity: Use storytelling to make the content engaging and relatable.\nRevise: Edit for clarity and impact, removing unnecessary content."
  },
  {
    "objectID": "report/report.html#report-content",
    "href": "report/report.html#report-content",
    "title": "Final Report",
    "section": "",
    "text": "These are just examples, you can use any structure that is suitable for your project.\n\n\n\nIntroduction: Provide an accessible overview and explain the motivation and importance of the research. Example: “This study explores how climate change affects local ecosystems, vital for wildlife conservation.”\nObjective: Clearly define the research goal and relate it to real-world challenges. Example: “We aim to analyze the effects of air pollution on public health in urban areas.”\nKey Findings: Present insights without technical terms, focusing on the impact. Example: “Air pollution increases the risk of respiratory diseases by 20%.”\nMethodology Overview: Briefly explain relevant methods. Example: “We analyzed air quality data from 50 cities and surveyed 10,000 residents.”\nVisualizations: Use simple graphs and infographics to convey findings. Example: A map showing pollution levels and a bar chart of health risks.\nSocietal Implications: Highlight the broader impact. Example: “This study highlights the need for better air quality policies.”\nCall to Action: Offer recommendations based on findings. Example: “We recommend city planners invest in green spaces.”\nConclusion: Recap the main findings and societal impact. Example: “Understanding pollution’s health impacts will help create healthier cities.”\n\n\n\n\n\nExecutive Summary: Summarize key findings and their relevance to business goals. Example: “This report predicts customer churn and offers strategies to reduce churn by 15%.”\nObjective: Define the problem or question addressed. Example: “This project aims to identify the drivers of customer churn.”\nKey Insights: Present the most important, actionable insights. Example: “Customers who interact with support twice within 30 days are 25% less likely to churn.”\nVisualizations: Use clear graphs to convey key insights. Example: A bar chart showing churn likelihood based on engagement.\nBusiness Implications: Explain how findings impact business outcomes and offer specific recommendations. Example: “Focus retention efforts on low-engagement customers.”\nRecommendations: Provide clear, actionable steps with projections. Example: “Implement an automated retention campaign, reducing churn by 10%.”\nConclusion: Summarize findings and suggest next steps. Example: “Addressing churn drivers can reduce loss and improve profitability.”\nAppendix (Optional): Additional charts or explanations for further insights."
  },
  {
    "objectID": "report/report.html#final-tips",
    "href": "report/report.html#final-tips",
    "title": "Final Report",
    "section": "",
    "text": "Simplicity: Avoid jargon; focus on business-relevant insights.\nVisual Focus: Prioritize charts and graphs over dense text.\nEmphasize Impact: Always link data insights to business outcomes."
  },
  {
    "objectID": "technical-details/data-collection/closing.html",
    "href": "technical-details/data-collection/closing.html",
    "title": "Summary",
    "section": "",
    "text": "This section should be written for a technical audience, focusing on detailed analysis, factual reporting, and clear presentation of data. The following serves as a guide, but feel free to adjust as needed.\n\n\n\nDiscuss any technical challenges faced during the project, such as data limitations, computational issues, or obstacles encountered during analysis.\nExplain unexpected results and their technical implications.\nIdentify areas for future work, including potential optimizations, further analysis, or scaling solutions.\n\n\n\n\n\nCompare your findings to relevant research, industry benchmarks, or intuitive expectations, if applicable.\n\n\n\n\n\nSummarize the key technical points and outcomes of the project.\nSuggest potential improvements or refinements to this part of the project.\nBased on the results, provide actionable recommendations for further research or optimization efforts."
  },
  {
    "objectID": "technical-details/data-collection/closing.html#challenges",
    "href": "technical-details/data-collection/closing.html#challenges",
    "title": "Summary",
    "section": "",
    "text": "Discuss any technical challenges faced during the project, such as data limitations, computational issues, or obstacles encountered during analysis.\nExplain unexpected results and their technical implications.\nIdentify areas for future work, including potential optimizations, further analysis, or scaling solutions."
  },
  {
    "objectID": "technical-details/data-collection/closing.html#benchmarks",
    "href": "technical-details/data-collection/closing.html#benchmarks",
    "title": "Summary",
    "section": "",
    "text": "Compare your findings to relevant research, industry benchmarks, or intuitive expectations, if applicable."
  },
  {
    "objectID": "technical-details/data-collection/closing.html#conclusion-and-future-steps",
    "href": "technical-details/data-collection/closing.html#conclusion-and-future-steps",
    "title": "Summary",
    "section": "",
    "text": "Summarize the key technical points and outcomes of the project.\nSuggest potential improvements or refinements to this part of the project.\nBased on the results, provide actionable recommendations for further research or optimization efforts."
  },
  {
    "objectID": "technical-details/data-collection/methods.html",
    "href": "technical-details/data-collection/methods.html",
    "title": "Methods",
    "section": "",
    "text": "Methods\nIn this section, provide an overview summary of the methods used on this page. This should include a brief description of the key techniques, algorithms, tools, or processes employed in your work. Make sure to outline the approach taken for data collection, processing, analysis, or any specific technical steps relevant to the project.\nIf you are developing a package, include a reference to the relevant documentation and provide a link here for easy access. Ensure that the package details are properly documented in its dedicated section, but mentioned and connected here for a complete understanding of the methods used in this project."
  },
  {
    "objectID": "technical-details/eda/instructions.html",
    "href": "technical-details/eda/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe EDA (Exploratory Data Analysis) tab in your portfolio serves as a crucial foundation for your project. It provides a thorough overview of the dataset, highlights patterns, identifies potential issues, and prepares the data for further analysis. Follow these instructions to document your EDA effectively:\nThe goal of EDA is to gain a deeper understanding of the dataset and its relevance to your project’s objectives. It involves summarizing key data characteristics, identifying patterns, anomalies, and preparing for future analysis phases.\nHere are suggestions for things to include on this page\nUnivariate Analysis:\n\nNumerical Variables:\n\nProvide summary statistics (mean, median, standard deviation).\nVisualize distributions using histograms or density plots.\n\nCategorical Variables:\n\nPresent frequency counts and visualize distributions using bar charts or pie charts.\n\nKey Insights:\n\nHighlight any notable trends or patterns observed.\n\n\nBivariate and Multivariate Analysis:\n\nCorrelation Analysis:\n\nAnalyze relationships between numerical variables using a correlation matrix.\nVisualize with heatmaps or pair plots and discuss any strong correlations.\n\nCrosstabulations:\n\nFor categorical variables, use crosstabs to explore relationships and visualize them with grouped bar plots.\n\nFeature Pairings:\n\nAnalyze relationships between key variables, particularly those related to your target.\nVisualize with scatter plots, box plots, or violin plots.\n\n\nData Distribution and Normalization:\n\nSkewness and Kurtosis:\nAnalyze and discuss the distribution of variables.\nApply transformations (e.g., log transformation) if needed for skewed data.\nNormalization:\nApply normalization or scaling techniques (e.g., min-max scaling, z-score).\nDocument and visualize the impact of normalization.\n\nStatistical Insights:\n\nConduct basic statistical tests (e.g., T-tests, ANOVA, chi-square) to explore relationships between variables.\nSummarize the statistical results and their implications for your analysis.\n\nData Visualization and Storytelling:\n\nVisual Summary:\nPresent key insights using charts and visualizations (e.g., Matplotlib, Seaborn, Plotly).\nEnsure all visualizations are well-labeled and easy to interpret.\nInteractive Visualizations (Optional):\nInclude interactive elements (e.g., Plotly, Bokeh) to allow users to explore the data further.\n\nConclusions and Next Steps:\n\nSummary of EDA Findings:\nHighlight the main takeaways from the EDA process (key trends, patterns, data quality issues).\nImplications for Modeling:\nDiscuss how your EDA informs the next steps in your project (e.g., feature selection, data transformations).\nOutline any further data cleaning or preparation required before moving into modeling."
  },
  {
    "objectID": "technical-details/eda/instructions.html#suggested-page-structure",
    "href": "technical-details/eda/instructions.html#suggested-page-structure",
    "title": "Instructions",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/eda/instructions.html#what-to-address",
    "href": "technical-details/eda/instructions.html#what-to-address",
    "title": "Instructions",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThe EDA (Exploratory Data Analysis) tab in your portfolio serves as a crucial foundation for your project. It provides a thorough overview of the dataset, highlights patterns, identifies potential issues, and prepares the data for further analysis. Follow these instructions to document your EDA effectively:\nThe goal of EDA is to gain a deeper understanding of the dataset and its relevance to your project’s objectives. It involves summarizing key data characteristics, identifying patterns, anomalies, and preparing for future analysis phases.\nHere are suggestions for things to include on this page\nUnivariate Analysis:\n\nNumerical Variables:\n\nProvide summary statistics (mean, median, standard deviation).\nVisualize distributions using histograms or density plots.\n\nCategorical Variables:\n\nPresent frequency counts and visualize distributions using bar charts or pie charts.\n\nKey Insights:\n\nHighlight any notable trends or patterns observed.\n\n\nBivariate and Multivariate Analysis:\n\nCorrelation Analysis:\n\nAnalyze relationships between numerical variables using a correlation matrix.\nVisualize with heatmaps or pair plots and discuss any strong correlations.\n\nCrosstabulations:\n\nFor categorical variables, use crosstabs to explore relationships and visualize them with grouped bar plots.\n\nFeature Pairings:\n\nAnalyze relationships between key variables, particularly those related to your target.\nVisualize with scatter plots, box plots, or violin plots.\n\n\nData Distribution and Normalization:\n\nSkewness and Kurtosis:\nAnalyze and discuss the distribution of variables.\nApply transformations (e.g., log transformation) if needed for skewed data.\nNormalization:\nApply normalization or scaling techniques (e.g., min-max scaling, z-score).\nDocument and visualize the impact of normalization.\n\nStatistical Insights:\n\nConduct basic statistical tests (e.g., T-tests, ANOVA, chi-square) to explore relationships between variables.\nSummarize the statistical results and their implications for your analysis.\n\nData Visualization and Storytelling:\n\nVisual Summary:\nPresent key insights using charts and visualizations (e.g., Matplotlib, Seaborn, Plotly).\nEnsure all visualizations are well-labeled and easy to interpret.\nInteractive Visualizations (Optional):\nInclude interactive elements (e.g., Plotly, Bokeh) to allow users to explore the data further.\n\nConclusions and Next Steps:\n\nSummary of EDA Findings:\nHighlight the main takeaways from the EDA process (key trends, patterns, data quality issues).\nImplications for Modeling:\nDiscuss how your EDA informs the next steps in your project (e.g., feature selection, data transformations).\nOutline any further data cleaning or preparation required before moving into modeling."
  },
  {
    "objectID": "technical-details/progress-log.html",
    "href": "technical-details/progress-log.html",
    "title": "Progress log",
    "section": "",
    "text": "11-23-2024\n\nHome\n\nWorked on project introduction\nDraft data science questions\n\nData Collection\n\nSearch for data sources\nPublic APIs\nF1 Official website\n\n\n11-24-2024\n\nData Collection\n\nrecord data\n\nRace Information - (2000-2023)\nDriver Standings\nCircuit Info\nConstructor Standings - not required - analysing only drivers’ performance\nweather data for each race\n\nText data\n\nnews api\nnews on top 10 drivers\n\n\nData Cleaning\n\nClean Race Info: json\nclean news data - for sentiment analysis\ndrivers standings\nrace information\n\n\n11-25-2024\n\nData Cleaning\n\ninclude url in the race dataset\nfollow the data cleaning process on the collected data\n\ndata collection\n\nweather data\n\nwiki - based on the race url from the dataset\n\n\nEDA\n\nstart woking on EDA\n\nText analysis\n\nword clouds\ninterpretaion\n\n\n\n\n– Focus on DSAN 5100 Project, 6300 Project and Final –\n12-11-2024 - Complete EDA - Word Clouds - Points / Driver and Constructor - Line plot: points / driver for different teams - different colors - distrubution of DNF per team - Trend in points for constructors - for top teams only - pair plot for finish categories - Work on the theme - overall theme: - team colors or blue? - colors for the plot - font size - sequence of plots - figure it out!!!"
  },
  {
    "objectID": "technical-details/progress-log.html#to-do",
    "href": "technical-details/progress-log.html#to-do",
    "title": "Progress log",
    "section": "To-do",
    "text": "To-do\n\nExplore possible topics by brainstorming with GPT\nwrite a technical methods sections for K-means\nwrite a technical methods sections for PCA\n\n… etc"
  },
  {
    "objectID": "technical-details/progress-log.html#member-1",
    "href": "technical-details/progress-log.html#member-1",
    "title": "Progress log",
    "section": "Member-1:",
    "text": "Member-1:\nProvide their name, a link to their “About Me” page.\nAlso, describe a log of their project roles.\nWeekly project contribution log:\nT: 10-15-2024\n\nCoordinate with team member to set up weekly meeting time\n\nM: 10-14-2024\n\nDo a first draft of the project landing page"
  },
  {
    "objectID": "technical-details/progress-log.html#member-2",
    "href": "technical-details/progress-log.html#member-2",
    "title": "Progress log",
    "section": "Member-2",
    "text": "Member-2\nProvide their name, a link to their “About Me” page.\nAlso, describe a log of their project roles.\nWeekly project contribution log:\nW: 10-16-2024\n\nAttend first group meeting"
  },
  {
    "objectID": "technical-details/unsupervised-learning/instructions.html",
    "href": "technical-details/unsupervised-learning/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Note: You should remove these instructions once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThis page is designed to give you hands-on experience with key unsupervised learning techniques, including clustering methods and dimensionality reduction, applied to real-world datasets. Please apply algorithms such as K-Means, DBSCAN, Hierarchical clustering, PCA, and t-SNE to your data. Through this process, you’ll deepen your understanding of how unsupervised learning can reveal hidden patterns and structure in data.\n\n\nThe objective of this section is to explore and demonstrate the effectiveness of PCA and t-SNE in reducing the dimensionality of complex data while preserving essential information and improving visualization.\n\nPCA (Principal Component Analysis):\n\nApply PCA to your dataset.\nDetermine the optimal number of principal components.\nVisualize the reduced-dimensional data.\nAnalyze and interpret the results.\n\nt-SNE (t-distributed Stochastic Neighbor Embedding):\n\nImplement t-SNE on the same dataset.\nExperiment with different perplexity values.\nVisualize the t-SNE output to reveal patterns and clusters.\nCompare the results of t-SNE with those from PCA.\n\nEvaluation and Comparison:\n\nEvaluate the effectiveness of PCA and t-SNE in preserving data structure.\nCompare the visualization capabilities of both techniques.\nDiscuss the trade-offs and scenarios where one technique may perform better than the other.\n\n\n\n\n\nApply clustering techniques (K-Means, DBSCAN, and Hierarchical clustering) to a selected dataset. The goal is to understand how each method works, compare their performance, and interpret the results.\n\nClustering Methods:\n\nApply K-Means, DBSCAN, and Hierarchical clustering to your dataset.\nWrite a technical summary for each method (2–4 paragraphs per method) explaining how it works, its purpose, and any model selection methods used (e.g., Elbow, Silhouette).\n\nResults Section:\n\nDiscuss and visualize the results of each clustering analysis.\nCompare the performance of different clustering methods, noting any insights gained from the analysis.\nVisualize cluster patterns and how they relate (if at all) to existing labels in the dataset.\nUse professional, labeled, and clear visualizations that support your discussion.\n\nConclusion:\n\nSummarize the key findings and their real-world implications in a non-technical way. Focus on the most important results and how they could apply to practical situations."
  },
  {
    "objectID": "technical-details/unsupervised-learning/instructions.html#suggested-page-structure",
    "href": "technical-details/unsupervised-learning/instructions.html#suggested-page-structure",
    "title": "Instructions",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/unsupervised-learning/instructions.html#what-to-address",
    "href": "technical-details/unsupervised-learning/instructions.html#what-to-address",
    "title": "Instructions",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nThis page is designed to give you hands-on experience with key unsupervised learning techniques, including clustering methods and dimensionality reduction, applied to real-world datasets. Please apply algorithms such as K-Means, DBSCAN, Hierarchical clustering, PCA, and t-SNE to your data. Through this process, you’ll deepen your understanding of how unsupervised learning can reveal hidden patterns and structure in data.\n\n\nThe objective of this section is to explore and demonstrate the effectiveness of PCA and t-SNE in reducing the dimensionality of complex data while preserving essential information and improving visualization.\n\nPCA (Principal Component Analysis):\n\nApply PCA to your dataset.\nDetermine the optimal number of principal components.\nVisualize the reduced-dimensional data.\nAnalyze and interpret the results.\n\nt-SNE (t-distributed Stochastic Neighbor Embedding):\n\nImplement t-SNE on the same dataset.\nExperiment with different perplexity values.\nVisualize the t-SNE output to reveal patterns and clusters.\nCompare the results of t-SNE with those from PCA.\n\nEvaluation and Comparison:\n\nEvaluate the effectiveness of PCA and t-SNE in preserving data structure.\nCompare the visualization capabilities of both techniques.\nDiscuss the trade-offs and scenarios where one technique may perform better than the other.\n\n\n\n\n\nApply clustering techniques (K-Means, DBSCAN, and Hierarchical clustering) to a selected dataset. The goal is to understand how each method works, compare their performance, and interpret the results.\n\nClustering Methods:\n\nApply K-Means, DBSCAN, and Hierarchical clustering to your dataset.\nWrite a technical summary for each method (2–4 paragraphs per method) explaining how it works, its purpose, and any model selection methods used (e.g., Elbow, Silhouette).\n\nResults Section:\n\nDiscuss and visualize the results of each clustering analysis.\nCompare the performance of different clustering methods, noting any insights gained from the analysis.\nVisualize cluster patterns and how they relate (if at all) to existing labels in the dataset.\nUse professional, labeled, and clear visualizations that support your discussion.\n\nConclusion:\n\nSummarize the key findings and their real-world implications in a non-technical way. Focus on the most important results and how they could apply to practical situations."
  },
  {
    "objectID": "technical-details/data-collection/main.html",
    "href": "technical-details/data-collection/main.html",
    "title": "Data Collection",
    "section": "",
    "text": "Note: You should remove these instruction once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\nIn the provide repo, these subsections have been included in the data-collection file as separate .qmd files that can be embedded using the {{&lt; include  &gt;}} tag.\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nOn this page, you will focus on data collection, which is an essential step for future analysis. You should have already selected a specific data-science question that can be addressed in a data-driven way.\nIt is recommended that you focus on one or two of the following data formats, text, tabular, image, geospatial, or network data.\nTabular (e.g. CSV files) and text formats are highly recommended, as these are covered most thoroughly in the course. Deviating from these formats may require additional work on your end. Please avoid timeseries data formats, as these require special methods not covered in the course. You can include as many additional formats as you want. Your project will revolve around the data you gather and will include data collection, analysis, visualization, and storytelling.\n\n\n\nBegin gathering your data and document the methods and sources on the Data Collection page of your project. Include screenshots or example tables to illustrate the data collection process without displaying entire datasets. Ensure transparency so anyone can replicate your work.\n\n\n\n\nDuring the collection phase, save the collected data locally to the data/raw-data folder, in the root of the project, for later processing. (Do not sync this folder to GitHub.)\nRemember, the “raw data” should typically be left “pristine”, to ensure replicability.\nLater when you clean the data, you should save the cleaned data to the data/processed-data folder, in the root of the project.\nYou should also save files you download manually from online to this folder\n\n\n\n\n\nYour data must be relevant to the project’s overall goals and help solve your research questions.\nYou must use at least one API to collect your data.\nEnsure you have at least one regression target: a continuous quantity that can be used for regression prediction with other features.\nEnsure you have at least one binary classification target: a two-class (A,B) label that can be predicted using other features.\nEnsure you have at least one multiclass-classification target: a multi-class (A,B,C …) label that can be predicted using other features.\nDo not use a Kaggle topic—this project is meant to simulate a real-world project. Kaggle datasets are typically too clean and have already been prepped for analysis, which doesn’t align with the project’s goals.\n\nFocus on data that tells a compelling story and supports the techniques covered in the class (e.g., clustering, classification, regression)."
  },
  {
    "objectID": "technical-details/data-collection/main.html#suggested-page-structure",
    "href": "technical-details/data-collection/main.html#suggested-page-structure",
    "title": "Data Collection",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\nIn the provide repo, these subsections have been included in the data-collection file as separate .qmd files that can be embedded using the {{&lt; include  &gt;}} tag."
  },
  {
    "objectID": "technical-details/data-collection/main.html#what-to-address",
    "href": "technical-details/data-collection/main.html#what-to-address",
    "title": "Data Collection",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nOn this page, you will focus on data collection, which is an essential step for future analysis. You should have already selected a specific data-science question that can be addressed in a data-driven way.\nIt is recommended that you focus on one or two of the following data formats, text, tabular, image, geospatial, or network data.\nTabular (e.g. CSV files) and text formats are highly recommended, as these are covered most thoroughly in the course. Deviating from these formats may require additional work on your end. Please avoid timeseries data formats, as these require special methods not covered in the course. You can include as many additional formats as you want. Your project will revolve around the data you gather and will include data collection, analysis, visualization, and storytelling."
  },
  {
    "objectID": "technical-details/data-collection/main.html#start-collecting-data",
    "href": "technical-details/data-collection/main.html#start-collecting-data",
    "title": "Data Collection",
    "section": "",
    "text": "Begin gathering your data and document the methods and sources on the Data Collection page of your project. Include screenshots or example tables to illustrate the data collection process without displaying entire datasets. Ensure transparency so anyone can replicate your work."
  },
  {
    "objectID": "technical-details/data-collection/main.html#saving-the-raw-data",
    "href": "technical-details/data-collection/main.html#saving-the-raw-data",
    "title": "Data Collection",
    "section": "",
    "text": "During the collection phase, save the collected data locally to the data/raw-data folder, in the root of the project, for later processing. (Do not sync this folder to GitHub.)\nRemember, the “raw data” should typically be left “pristine”, to ensure replicability.\nLater when you clean the data, you should save the cleaned data to the data/processed-data folder, in the root of the project.\nYou should also save files you download manually from online to this folder"
  },
  {
    "objectID": "technical-details/data-collection/main.html#requirements",
    "href": "technical-details/data-collection/main.html#requirements",
    "title": "Data Collection",
    "section": "",
    "text": "Your data must be relevant to the project’s overall goals and help solve your research questions.\nYou must use at least one API to collect your data.\nEnsure you have at least one regression target: a continuous quantity that can be used for regression prediction with other features.\nEnsure you have at least one binary classification target: a two-class (A,B) label that can be predicted using other features.\nEnsure you have at least one multiclass-classification target: a multi-class (A,B,C …) label that can be predicted using other features.\nDo not use a Kaggle topic—this project is meant to simulate a real-world project. Kaggle datasets are typically too clean and have already been prepped for analysis, which doesn’t align with the project’s goals.\n\nFocus on data that tells a compelling story and supports the techniques covered in the class (e.g., clustering, classification, regression)."
  },
  {
    "objectID": "technical-details/data-collection/main.html#example",
    "href": "technical-details/data-collection/main.html#example",
    "title": "Data Collection",
    "section": "Example",
    "text": "Example\nIn the following code, we first utilized the requests library to retrieve the HTML content from the Wikipedia page. Afterward, we employed BeautifulSoup to parse the HTML and locate the specific table of interest by using the find function. Once the table was identified, we extracted the relevant data by iterating through its rows, gathering country names and their respective populations. Finally, we used Pandas to store the collected data in a DataFrame, allowing for easy analysis and visualization. The data could also be optionally saved as a CSV file for further use.\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Step 1: Send a request to Wikipedia page\nurl = 'https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population'\nresponse = requests.get(url)\n\n# Step 2: Parse the page content using BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Step 3: Find the table containing the data (usually the first table for such lists)\ntable = soup.find('table', {'class': 'wikitable'})\n\n# Step 4: Extract data from the table rows\ncountries = []\npopulations = []\n\n# Iterate over the table rows\nfor row in table.find_all('tr')[1:]:  # Skip the header row\n    cells = row.find_all('td')\n    if len(cells) &gt; 1:\n        country = cells[1].text.strip()  # The country name is in the second column\n        population = cells[2].text.strip()  # The population is in the third column\n        countries.append(country)\n        populations.append(population)\n\n# Step 5: Create a DataFrame to store the results\ndata = pd.DataFrame({\n    'Country': countries,\n    'Population': populations\n})\n\n# Display the scraped data\nprint(data)\n\n# Optionally save to CSV\ndata.to_csv('../../data/raw-data/countries_population.csv', index=False)\n\n                                 Country     Population\n0                                  World  8,119,000,000\n1                                  China  1,409,670,000\n2                          1,404,910,000          17.3%\n3                          United States    335,893,238\n4                              Indonesia    281,603,800\n..                                   ...            ...\n235                   Niue (New Zealand)          1,681\n236                Tokelau (New Zealand)          1,647\n237                         Vatican City            764\n238  Cocos (Keeling) Islands (Australia)            593\n239                Pitcairn Islands (UK)             35\n\n[240 rows x 2 columns]"
  },
  {
    "objectID": "technical-details/data-collection/main.html#challenges",
    "href": "technical-details/data-collection/main.html#challenges",
    "title": "Data Collection",
    "section": "Challenges",
    "text": "Challenges\n\nDiscuss any technical challenges faced during the project, such as data limitations, computational issues, or obstacles encountered during analysis.\nExplain unexpected results and their technical implications.\nIdentify areas for future work, including potential optimizations, further analysis, or scaling solutions."
  },
  {
    "objectID": "technical-details/data-collection/main.html#benchmarks",
    "href": "technical-details/data-collection/main.html#benchmarks",
    "title": "Data Collection",
    "section": "Benchmarks",
    "text": "Benchmarks\n\nCompare your findings to relevant research, industry benchmarks, or intuitive expectations, if applicable."
  },
  {
    "objectID": "technical-details/data-collection/main.html#conclusion-and-future-steps",
    "href": "technical-details/data-collection/main.html#conclusion-and-future-steps",
    "title": "Data Collection",
    "section": "Conclusion and Future Steps",
    "text": "Conclusion and Future Steps\n\nSummarize the key technical points and outcomes of the project.\nSuggest potential improvements or refinements to this part of the project.\nBased on the results, provide actionable recommendations for further research or optimization efforts.\n\n\nImport Required Libraries\n\nimport requests\nimport pandas as pd\nimport numpy as np\nimport json\nimport os\nimport re\nfrom datetime import datetime\nimport time\nfrom bs4 import BeautifulSoup\n\n\n\nRace Information for 2000-2023 Seasons\n\ndef get_race_results(url, year, offset, limit=1000):\n    full_url = f\"{url}/{year}/results.json?limit={limit}&offset={offset}\"\n    result = requests.get(full_url)\n    return result.json()\n\n\n# Testing for 2023 season\nseason_2023_json = get_race_results(url='http://ergast.com/api/f1', year=2023, offset=0)\n\n# Save the data to a JSON file\nwith open('../../data/raw-data/race_data_2023.json', 'w') as outfile:\n    json.dump(season_2023_json, outfile)\n\n\n# collecting data from 2000 to 2022\n\n# function to loop through years and fetch the results\ndef race_data(start_year, end_year, output_dr, url):\n\n    for year in range(start_year, end_year + 1):\n        race_data = get_race_results(url, year, offset=0)\n        # save the output \n        output_file = os.path.join(output_dr, f\"race_data_{year}.json\")\n        with open(output_file, 'w') as f:\n            json.dump(race_data, f)\n\n\n# call race_data()\nrace_data(\n    start_year = 2000,\n    end_year = 2009,\n    output_dr = \"../../data/raw-data\",\n    url = 'http://ergast.com/api/f1'\n)\n\n\n\nDriver Standings for 2000-2023 Seasons\n\ndef driverstanding_info(url, season):\n    full_url = f\"{url}/{season}/driverStandings.json\"\n    response = requests.get(full_url)\n    return response.json()\n\n# Function to fetch and save all driver standings for the given seasons\ndef driverstandings_info(start_year, end_year, output_file, url=\"http://ergast.com/api/f1\"):\n    driver_standings_data = {}\n    \n    for year in range(start_year, end_year + 1):\n        data = driverstanding_info(url, year)\n        driver_standings_data[year] = data\n    \n    # Save to output file\n    with open(output_file, 'w') as outfile:\n        json.dump(driver_standings_data, outfile)\n\n# Call the function for seasons 2000–2023\ndriverstandings_info(\n    start_year=2000,\n    end_year=2023,\n    output_file=\"../../data/raw-data/driver_standings/driver_standings_2000_2023.json\"\n)\n\n\n\nCircuit Information for 2000-2023 Seasons\n\ndef circuit_info(output_file, url):\n    results = requests.get(url)\n    \n    # save to output file\n    with open(output_file, 'w') as f:\n        json.dump(results.json(), f)\n        \n\n\ncircuit_info(output_file='../../data/raw-data/circuit_data.json', url = \"http://ergast.com/api/f1/circuits.json\")\n\n\n\nNews of Top 10 drivers in 2024 season (so far)\n\nUsing News-API\nResources: https://jfh.georgetown.domains/centralized-lecture-content/content/data-science/data-collection/share/API-newapi/news-api.html\n\n\nSet Credentials\n\nbaseURL = \"https://newsapi.org/v2/everything?\"\ntotal_requests=2\nverbose=True\n\nAPI_KEY='86d4dac5a4864ece92da90bc31277e53'\n\n\ndef news_data(topic, API_KEY, total_requests=1, verbose=True):\n    baseURL = \"https://newsapi.org/v2/everything?\"\n\n    # API parameters\n    URLpost = {\n        'apiKey': API_KEY,\n        'q': '+'+topic,\n        'sotBy': 'relevancy',\n        'pageSize': 100,\n        'page': 1\n    }\n    # last name of the drives to avoid spaces in the file names\n    file_name = topic.split()[-1]\n    all_articles = []\n\n    # make an API request \n    for request_num in range(total_requests):\n        response = requests.get(baseURL, params=URLpost)\n        response_data = response.json()\n\n        articles = response_data.get('articles', [])\n        all_articles.extend(articles)\n\n        URLpost['page'] += 1\n\n\n    # output file path\n    output_dr = \"../../data/raw-data/News_Drivers\"\n    output_file = os.path.join(output_dr, f\"{file_name}_raw_text.json\")\n\n    # save to output file\n    with open(output_file, 'w') as f:\n        json.dump(all_articles, f, indent=4)\n    \n    return all_articles\n\n\n\nTop 10 Drivers as of Round 22 (Las Vegas Grand Prix)\n\nMax Verstappen\nLando Norris\nCharles Leclerc\nOscar Piastri\nCarlos Sainz\nGeorge Russell\nLewis Hamilton\nSergio Perez\nFernando Alonso\nNico Hulkenberg\n\n\n# testing \ntext_data = news_data('Max Verstappen', API_KEY, total_requests=1, verbose=True)\n\n\ntext_data = news_data('Lando Norris', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Charles Leclerc', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Oscar Piastri', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Carlos Sainz', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('George Russell', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Lewis Hamilton', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Sergio Perez', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Fernando Alonso', API_KEY, total_requests=1, verbose=True)\ntext_data = news_data('Nico Hulkenberg', API_KEY, total_requests=1, verbose=True)\n\n\n\n\nFetch Weather data on the day of the race\n1\nThe weather data will be fetched from the wiki page of each race.\n\n# the url for each race is in the race data collected using ergast API\nrace_df = pd.read_csv(\"../../data/processed-data/all_race_results_cleaned.csv\")\n\n\nrace_data = race_df[['season', 'raceName', 'url']]\n\n\nrace_data = race_data.drop_duplicates()\n\n\nrace_data.head()\n\n\n\n\n\n\n\n\nseason\nraceName\nurl\n\n\n\n\n0\n2010\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\n\n\n24\n2010\nAustralian Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Australian_G...\n\n\n48\n2010\nMalaysian Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Malaysian_Gr...\n\n\n72\n2010\nChinese Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Chinese_Gran...\n\n\n96\n2010\nSpanish Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Spanish_Gran...\n\n\n\n\n\n\n\n\n\ndef get_weather_from_wikipedia(url):\n    response = requests.get(url)\n    bs = BeautifulSoup(response.text, 'html.parser')  \n    \n    # locate the infobox table\n    table = bs.find('table', {'class': 'infobox infobox-table vevent'})\n    if not table:\n        print(f\"No infobox found on the page: {url}\")\n        return \"Not Available\"\n    \n    # search for the \"Weather\" row in the table\n    for row in table.find_all('tr'):\n        # find the header cell with class 'infobox-label'\n        header = row.find('th', {'class': 'infobox-label'})  \n        # check if it contains \"Weather\"\n        if header and 'Weather' in header.text:  # Check if it contains \"Weather\"\n            # find the corresponding data cell with class 'infobox-data'\n            data = row.find('td', {'class': 'infobox-data'})  \n            \n            if data:\n                return data.text.strip()  \n    \n    \nrace_data['weather'] = None\n\n# fetch weather information for each URL\nfor index, row in race_data.iterrows():\n    url = row['url']\n    # for debuggin purpose\n    print(f\"Fetching weather for: {url}\")\n    \n    # get the weather information\n    weather = get_weather_from_wikipedia(url)\n    \n    # update the weather column\n    race_data.at[index, 'weather'] = weather\n\n# save to output file\noutput_csv = \"../../data/raw-data/weather/race_data_with_weather.csv\"\nrace_data.to_csv(output_csv, index=False)\n\nprint(f\"Updated race data saved to: {output_csv}\")\n\n\nos.makedirs('cache', exist_ok=True)\nfastf1.Cache.enable_cache('cache')\n\n\ntrack_data = []\n\ndef extract_track_features(year, race_name):\n    session = fastf1.get_session(year, race_name, 'Q') \n    session.load()\n\n    # Get the fastest lap\n    fastest_lap = session.laps.pick_fastest()\n    telemetry = fastest_lap.get_telemetry()\n\n    # Track Length\n    track_length = telemetry['Distance'].iloc[-1]  # Distance of the fastest lap\n\n    # Max Speed\n    max_speed = telemetry['Speed'].max()\n\n    # Average Speed\n    avg_speed = track_length / fastest_lap['LapTime'].total_seconds()\n\n    # Percentage of Full Throttle\n    full_throttle = telemetry[telemetry['Throttle'] &gt;= 95]\n    perc_full_throttle = (len(full_throttle) / len(telemetry)) * 100\n\n    # Number of Corners\n    telemetry['is_corner'] = telemetry['Speed'] &lt; 100\n    num_corners = (telemetry['is_corner'] & ~telemetry['is_corner'].shift(1, fill_value=False)).sum()\n\n    # Number of Straights\n    telemetry['is_straight'] = telemetry['Speed'] &gt; 150\n    num_straights = (telemetry['is_straight'] & ~telemetry['is_straight'].shift(1, fill_value=False)).sum()\n\n    return {\n        \"Year\": year,\n        \"Grand Prix\": race_name,\n        \"Track Length (m)\": track_length,\n        \"Max Speed (km/h)\": max_speed,\n        \"Full Throttle (%)\": perc_full_throttle,\n        \"Number of Corners\": num_corners,\n        \"Number of Straights\": num_straights\n    }\n\nyear = 2023\nschedule = fastf1.get_event_schedule(year)\n\nfor _, event in schedule.iterrows():  \n    if not pd.isna(event['Session1']):  \n        try:\n            track_features = extract_track_features(year, event['EventName'])\n            track_data.append(track_features)\n        except Exception as e:\n            print(f\"Failed for {event['EventName']} in {year}: {e}\")\n\ndf_tracks = pd.DataFrame(track_data)\n\n\n\n# merging all racetrack features into a single csv\nfolder_path = \"../../data/raw-data/circuit_data/\"\n\ndataframes = []\n\nfor file_name in os.listdir(folder_path):\n    if file_name.endswith('.csv'): \n        file_path = os.path.join(folder_path, file_name)\n        df = pd.read_csv(file_path)\n        dataframes.append(df)\n\nmerged_df = pd.concat(dataframes, ignore_index=True)\n\noutput_file = \"../../data/raw-data/circuit_data/merged_circuit_features.csv\"\nos.makedirs(os.path.dirname(output_file), exist_ok=True)\nmerged_df.to_csv(output_file, index=False)\n\n\n\nPitstop data"
  },
  {
    "objectID": "technical-details/supervised-learning/main.html",
    "href": "technical-details/supervised-learning/main.html",
    "title": "Supervised Learning",
    "section": "",
    "text": "Note: You should remove these instruction once you have read and understood them. They should not be included in your final submission.\nRemember: Exactly what do you put on this page will be specific you your project and data. Some things might “make more sense” on one page rather than another, depending on your workflow. Organize your project in a logical way that makes the most sense to you.\n\n\nHere’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications.\n\n\n\n\nThe following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nPlease do some form of “Feature selection” in your project and include a section on it. Discuss the process you went through to select the features that you used in your model, this should be done for both classification models and regression models. What did you include and why? What did you exclude? What was the reasoning behind your decisions? This section can be included here, or you can make a new page in the dropdown menu for it.\nPlease break this page into a “regression” section, “binary classification” section, and a “Multi-class classification” section. For each case you should try multiple methods, including those discussed in class, and compare and contrast their preformance and results.\n\n\n\n\nNormalization or Standardization: Apply techniques to scale the data appropriately.\nFeature Selection or Extraction: Identify and select the most relevant features for your analysis.\nEncoding Categorical Variables: Convert categorical variables into a suitable format for modeling.\n\n\n\n\n\nModel Rationale: Explain the reasons for selecting specific models or algorithms.\nOverview of Algorithms: Provide a brief overview of the algorithms used\n\n\n\n\n\nSplit Methods: Detail the splitting methods used (e.g., train-test split, cross-validation).\nDataset Proportions: Specify the proportions used for splitting the dataset.\n\n\n\n\n\nBinary Classification Metrics: Discuss metrics such as accuracy, precision, recall, F1 score, and ROC-AUC.\nMulticlass Classification Metrics: Include metrics such as confusion matrix and macro/micro F1 score.\nRegression Metrics: Explain metrics such as RMSE, MAE, and R-squared, parity plots, etc.\n\n\n\n\n\nModel Performance Summary: Provide a summary of the model’s performance.\nVisualizations: Include visualizations of results (e.g., ROC curves, feature importance plots).\n\n\n\n\n\nResult Interpretation: Interpret the results obtained from the analysis.\nModel Performance Comparison: Compare the performance of different models.\nInsights Gained: Share insights learned from the analysis."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#suggested-page-structure",
    "href": "technical-details/supervised-learning/main.html#suggested-page-structure",
    "title": "Supervised Learning",
    "section": "",
    "text": "Here’s one suggested structure for organizing your technical pages. You can adjust this as needed:\nAudience:Remember that these are written for a technical audience. Assume they have completed the DSAN program, but would appreciate refreshers of the important concepts.\n\nIntroduction and Motivation: Briefly outline your plan. What are you doing on this page, and why? Provide context and explain the goals of your analysis.\nOverview of Methods: Give a concise explanation of the methods used. For example, if using K-Means clustering, describe what it is, how it works, the inputs and outputs, and key hyperparameters.\nCode: Include the code you used to implement your workflow.\nSummary and Interpretation of Results: Summarize your findings, interpret the results, and discuss their technical implications."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#what-to-address",
    "href": "technical-details/supervised-learning/main.html#what-to-address",
    "title": "Supervised Learning",
    "section": "",
    "text": "The following is a list of some of the things you should address on this page. This list is not exhaustive, and you should use your judgment to decide what is most relevant to your project.\nPlease do some form of “Feature selection” in your project and include a section on it. Discuss the process you went through to select the features that you used in your model, this should be done for both classification models and regression models. What did you include and why? What did you exclude? What was the reasoning behind your decisions? This section can be included here, or you can make a new page in the dropdown menu for it.\nPlease break this page into a “regression” section, “binary classification” section, and a “Multi-class classification” section. For each case you should try multiple methods, including those discussed in class, and compare and contrast their preformance and results."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#data-preprocessing",
    "href": "technical-details/supervised-learning/main.html#data-preprocessing",
    "title": "Supervised Learning",
    "section": "",
    "text": "Normalization or Standardization: Apply techniques to scale the data appropriately.\nFeature Selection or Extraction: Identify and select the most relevant features for your analysis.\nEncoding Categorical Variables: Convert categorical variables into a suitable format for modeling."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#model-selection",
    "href": "technical-details/supervised-learning/main.html#model-selection",
    "title": "Supervised Learning",
    "section": "",
    "text": "Model Rationale: Explain the reasons for selecting specific models or algorithms.\nOverview of Algorithms: Provide a brief overview of the algorithms used"
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#training-and-testing-strategy",
    "href": "technical-details/supervised-learning/main.html#training-and-testing-strategy",
    "title": "Supervised Learning",
    "section": "",
    "text": "Split Methods: Detail the splitting methods used (e.g., train-test split, cross-validation).\nDataset Proportions: Specify the proportions used for splitting the dataset."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#model-evaluation-metrics",
    "href": "technical-details/supervised-learning/main.html#model-evaluation-metrics",
    "title": "Supervised Learning",
    "section": "",
    "text": "Binary Classification Metrics: Discuss metrics such as accuracy, precision, recall, F1 score, and ROC-AUC.\nMulticlass Classification Metrics: Include metrics such as confusion matrix and macro/micro F1 score.\nRegression Metrics: Explain metrics such as RMSE, MAE, and R-squared, parity plots, etc."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#results",
    "href": "technical-details/supervised-learning/main.html#results",
    "title": "Supervised Learning",
    "section": "",
    "text": "Model Performance Summary: Provide a summary of the model’s performance.\nVisualizations: Include visualizations of results (e.g., ROC curves, feature importance plots)."
  },
  {
    "objectID": "technical-details/supervised-learning/main.html#discussion",
    "href": "technical-details/supervised-learning/main.html#discussion",
    "title": "Supervised Learning",
    "section": "",
    "text": "Result Interpretation: Interpret the results obtained from the analysis.\nModel Performance Comparison: Compare the performance of different models.\nInsights Gained: Share insights learned from the analysis."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Predicting Startup Success",
    "section": "Introduction",
    "text": "Introduction\nOn an average, an astounding 4.7 million businesses are started every year 1, fueling innovation and economic growth. However, up to 90% of the startups fail. The average failure rate in the first year is 10%, but this increases dramatically to 70% within the next 5 years 2.\nIn the United States alone, the venture capital investments exceeded $150 billion in 2023 3, reflecting the significant financial stakes involved.\nThese statistics underscore the crucial need for entrepreneurs, investors, and policy makers to make informed decisions.\nBy leveraging data science techniques, this project aims to predict whether a startup will succeed or fail, providing actionable insights to stakeholders. This will not only help investors mitigate risks but also empowers entrepreneurs to focus on strategies that maximize their chances of success."
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Predicting Startup Success",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Predicting Startup Success",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.commerceinstitute.com/new-businesses-started-every-year/ - data↩︎\nhttps://explodingtopics.com/blog/startup-failure-stats↩︎\nhttps://news.crunchbase.com/venture/q3-2024-funding-recap-charts/↩︎"
  },
  {
    "objectID": "index.html#research-questions",
    "href": "index.html#research-questions",
    "title": "Predicting Startup Success",
    "section": "Research Questions",
    "text": "Research Questions\n\nHow are startups distributed across different domains in the United States, and what patterns or trends emerge from this distributions.\nWhat percentage of startups succeed in each domain, and what distribinguishes high-performing doomains from others?\nWhat are the key dfferences in financial, and operational factors between startups that have closed down, and those that are acquired?\nAre there specific terminologies in the new that drive the sentiment of articles on startups, and can these terms be leveraged to analyze success rates further?\nWhat Machine Learning algortihms can be used to predict the success of a startup based on the data collected, and what are the key features that drive the predictions?"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#clean-the-news-data",
    "href": "technical-details/data-cleaning/main.html#clean-the-news-data",
    "title": "Data Cleaning",
    "section": "Clean the News Data",
    "text": "Clean the News Data\n\n# import required libraries\nimport os\nimport json\nimport re\nimport pandas as pd\nimport numpy as np\nimport nltk\nnltk.download('stopwords')\n\n[nltk_data] Downloading package stopwords to\n[nltk_data]     /Users/nandinikodali/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\nTrue\n\n\n\nfrom sklearn.preprocessing import StandardScaler\n\n\nimport re\nfrom nltk.corpus import stopwords\n\n# Load English stop words\nstop_words = set(stopwords.words('english'))\n\ndef string_cleaner(input_string):\n    try:\n        # Remove unwanted punctuation\n        out = re.sub(r\"[.,;@#?!&$-]+\", \" \", input_string)  # Replace punctuation with space\n        \n        # Remove escape characters like \\u201e\n        out = re.sub(r'\\\\u[0-9a-fA-F]{4}', '', out)\n        \n        # Remove extra whitespace\n        out = re.sub(r'\\s+', ' ', out).strip()\n        \n        # Convert to lowercase\n        out = out.lower()\n        \n        # Remove stop words and words of length &lt;= 3\n        words = out.split()\n        words = [word for word in words if len(word) &gt; 3 and word not in stop_words]\n        \n        # Join words back into a single string\n        out = ' '.join(words)\n        \n    except Exception as e:\n        print(f\"Error cleaning string: {e}\")\n        out = ''\n    \n    return out\n\n# Example Usage\ntext = r\"thema kdssdn\\u201eformel 1\\u201c lesen sie jetzt j\\u201everstappen im training\"\ncleaned_text = string_cleaner(text)\nprint(f\"Cleaned Text: {cleaned_text}\")\n\nCleaned Text: thema kdssdnformel lesen jetzt jverstappen training\n\n\n\n# function for cleaning the text\nstop_words = set(stopwords.words('english'))\n\ndef string_cleaner(input_string):\n    try:\n        out = re.sub(r\"\"\"\n                    [,.;@#?!&$-]+\n                    \\ *          \n                    \"\"\",\n                    \" \",\n                    input_string, flags=re.VERBOSE)\n        out = re.sub(r'\\\\u[0-9a-fA-F]{4}', '', out)\n        out = re.sub('[’.]+', '', out)\n\n        out = re.sub(r'\\s+', ' ', out)\n        out = out.lower()\n        words = out.split()\n        words = [\n            word for word in words\n            if len(word) &gt; 3 and word not in stop_words and not re.search(r'\\d', word)\n        ]\n        out = ' '.join(words)\n    except:\n        print(\"ERROR\")\n        out = ''\n    return out\n\n\n# Function to clean news data\ndef clean_news_data(raw_data_dir, clean_data_dir):\n    \n    # Iterate through raw data files\n    for file_name in os.listdir(raw_data_dir):\n        if file_name.endswith(\"_raw_text.json\"):  # Process only raw data files\n            \n            # Load the raw data\n            raw_file_path = os.path.join(raw_data_dir, file_name)\n            with open(raw_file_path, 'r') as raw_file:\n                raw_data = json.load(raw_file)\n            \n            # Clean the data\n            clean_data = {}\n            for article in raw_data:\n                title = article.get('title', '')\n                description = article.get('description', '')\n                \n                if title and description:\n                    clean_title = string_cleaner(title)\n                    clean_description = string_cleaner(description)\n                    clean_data[clean_title] = clean_description\n            \n            # Save the cleaned data to a new file\n            clean_file_name = file_name.replace(\"_raw_text.json\", \"_clean_news.json\")\n            clean_file_path = os.path.join(clean_data_dir, clean_file_name)\n            with open(clean_file_path, 'w') as clean_file:\n                json.dump(clean_data, clean_file, indent=4)\n\n\n# Define directories\n\n# Directory with raw data files\nraw_data_dir = \"../../data/raw-data/News_Drivers\"  \n\n# Directory for cleaned data files\nclean_data_dir = \"../../data/processed-data/News_drivers\"  \n\n\n# Clean the news data\nclean_news_data(raw_data_dir, clean_data_dir)"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#clean-the-drivers-standings",
    "href": "technical-details/data-cleaning/main.html#clean-the-drivers-standings",
    "title": "Data Cleaning",
    "section": "Clean the Drivers Standings",
    "text": "Clean the Drivers Standings\n\ninput_file = \"../../data/raw-data/Driver_standings/driver_standings_2000_2023.json\"\noutput_file = \"../../data/processed-data/driver_standings_2000_2023.csv\"\n\n\nwith open(input_file, 'r') as f:\n    data = json.load(f)\n\n# Prepare a list to store extracted records\ncleaned_data = []\n\n# Loop through each season in the JSON\nfor season, season_data in data.items():\n    standings_lists = season_data.get('MRData', {}).get('StandingsTable', {}).get('StandingsLists', [])\n    \n    for standings in standings_lists:\n        driver_standings = standings.get('DriverStandings', [])\n        \n        for entry in driver_standings:\n            # Extract required fields\n            position = entry.get('position', '')\n            points = entry.get('points', '')\n            wins = entry.get('wins', '')\n            driver = entry.get('Driver', {})\n            constructors = entry.get('Constructors', [])\n            \n            # Extract driver and constructor details\n            given_name = driver.get('givenName', '')\n            family_name = driver.get('familyName', '')\n            constructor_id = constructors[0].get('constructorId', '') if constructors else ''\n            constructor_name = constructors[0].get('name', '') if constructors else ''\n            \n            # Append the record to the cleaned data list\n            cleaned_data.append({\n                \"Season\": season,\n                \"Position\": position,\n                \"FirstName\": given_name,\n                \"LastName\": family_name,\n                \"Constructor_ID\": constructor_id,\n                \"Constructor_Name\": constructor_name,\n                \"Points\": points,\n                \"Wins\": wins\n            })\n\n\ndf = pd.DataFrame(cleaned_data)\ndf['driverName'] = df['FirstName'] + \" \" + df['LastName']\ndf = df.drop(['FirstName', 'LastName'], axis=1)\ndf.to_csv(output_file, index=False)"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#clean-the-circuit-information",
    "href": "technical-details/data-cleaning/main.html#clean-the-circuit-information",
    "title": "Data Cleaning",
    "section": "Clean the Circuit Information",
    "text": "Clean the Circuit Information\n\ninput_file = \"../../data/raw-data/circuit_data/circuit_data.json\"\noutput_file = \"../../data/processed-data/circuit_data_clean.csv\"\n\n\n# Ensure the output directory exists\nos.makedirs(os.path.dirname(output_file), exist_ok=True)\n\n# Read the JSON file\nwith open(input_file, 'r') as f:\n    data = json.load(f)\n\n# Extract circuit data\ncircuits = data.get('MRData', {}).get('CircuitTable', {}).get('Circuits', [])\n\n# Prepare a list to store extracted records\ncleaned_data = []\n\nfor circuit in circuits:\n    circuit_id = circuit.get('circuitId', '')\n    circuit_name = circuit.get('circuitName', '')\n    country = circuit.get('Location', {}).get('country', '')\n    latitude = circuit.get('Location', {}).get('lat', '')\n    longitude = circuit.get('Location', {}).get('long', '')\n    \n    # Append to the list\n    cleaned_data.append({\n        \"Circuit_ID\": circuit_id,\n        \"Circuit_Name\": circuit_name,\n        \"Country\": country,\n        \"Latitude\": latitude,\n        \"Longitude\": longitude\n    })\n\n# Convert the list to a Pandas DataFrame\ndf = pd.DataFrame(cleaned_data)\n\n# Save the DataFrame to a CSV file\ndf.to_csv(output_file, index=False)"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#clean-the-race-data",
    "href": "technical-details/data-cleaning/main.html#clean-the-race-data",
    "title": "Data Cleaning",
    "section": "Clean the Race data",
    "text": "Clean the Race data\n\ninput_file = \"../../data/raw-data/race_data_2000.json\"\noutput_file = \"../../data/processed-data/race_data/race_data_2000_clean.csv\"\nos.makedirs(os.path.dirname(output_file), exist_ok=True)\n\n\n# testing on a single file\n# Read the JSON file\nwith open(input_file, 'r') as f:\n    data = json.load(f)\n\n# Extract races from the JSON\nraces = data.get('MRData', {}).get('RaceTable', {}).get('Races', [])\n\n# Prepare a list to hold flattened race results\nall_results = []\n\n# Loop through each race and flatten its data\nfor race in races:\n    race_info = {  # Extract race-level details\n        \"season\": race.get(\"season\", \"\"),\n        \"round\": race.get(\"round\", \"\"),\n        \"raceName\": race.get(\"raceName\", \"\"),\n        \"circuitName\": race.get(\"Circuit\", {}).get(\"circuitName\", \"\"),\n        \"locality\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"locality\", \"\"),\n        \"country\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"country\", \"\"),\n        \"lat\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"lat\", \"\"),\n        \"long\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"long\", \"\"),\n        \"date\": race.get(\"date\", \"\"),\n    }\n    \n    # Extract results and combine with race-level details\n    results = race.get(\"Results\", [])\n    for result in results:\n        # Combine race-level and result-level data\n        combined_data = {**race_info, **result}\n        # Add flattened driver and constructor details\n        combined_data.update({\n            \"driverId\": result.get(\"Driver\", {}).get(\"driverId\", \"\"),\n            \"driverGivenName\": result.get(\"Driver\", {}).get(\"givenName\", \"\"),\n            \"driverFamilyName\": result.get(\"Driver\", {}).get(\"familyName\", \"\"),\n            \"constructorId\": result.get(\"Constructor\", {}).get(\"constructorId\", \"\"),\n            \"constructorName\": result.get(\"Constructor\", {}).get(\"name\", \"\"),\n            \"status\": result.get(\"status\", \"\"),\n            \"timeMillis\": result.get(\"Time\", {}).get(\"millis\", \"\"),\n            \"time\": result.get(\"Time\", {}).get(\"time\", \"\")\n        })\n        all_results.append(combined_data)\n\n# Convert to a Pandas DataFrame\ndf = pd.DataFrame(all_results)\n\n# Save the DataFrame to a CSV file\ndf.to_csv(output_file, index=False)\n\n\nrace_df = pd.read_csv(\"../../data/processed-data/race_data/race_data_2000_clean.csv\")\nrace_df.head()\n\n\n\n\n\n\n\n\nseason\nround\nraceName\ncircuitName\nlocality\ncountry\nlat\nlong\ndate\nnumber\n...\nlaps\nstatus\nTime\ndriverId\ndriverGivenName\ndriverFamilyName\nconstructorId\nconstructorName\ntimeMillis\ntime\n\n\n\n\n0\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n3\n...\n58\nFinished\n{'millis': '5641987', 'time': '1:34:01.987'}\nmichael_schumacher\nMichael\nSchumacher\nferrari\nFerrari\n5641987.0\n1:34:01.987\n\n\n1\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n4\n...\n58\nFinished\n{'millis': '5653402', 'time': '+11.415'}\nbarrichello\nRubens\nBarrichello\nferrari\nFerrari\n5653402.0\n+11.415\n\n\n2\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n9\n...\n58\nFinished\n{'millis': '5661996', 'time': '+20.009'}\nralf_schumacher\nRalf\nSchumacher\nwilliams\nWilliams\n5661996.0\n+20.009\n\n\n3\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n22\n...\n58\nFinished\n{'millis': '5686434', 'time': '+44.447'}\nvilleneuve\nJacques\nVilleneuve\nbar\nBAR\n5686434.0\n+44.447\n\n\n4\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n11\n...\n58\nFinished\n{'millis': '5687152', 'time': '+45.165'}\nfisichella\nGiancarlo\nFisichella\nbenetton\nBenetton\n5687152.0\n+45.165\n\n\n\n\n5 rows × 26 columns\n\n\n\n\nrace_df.columns\n\nIndex(['season', 'round', 'raceName', 'circuitName', 'locality', 'country',\n       'lat', 'long', 'date', 'number', 'position', 'positionText', 'points',\n       'Driver', 'Constructor', 'grid', 'laps', 'status', 'Time', 'driverId',\n       'driverGivenName', 'driverFamilyName', 'constructorId',\n       'constructorName', 'timeMillis', 'time'],\n      dtype='object')\n\n\n\nrace_df = race_df.drop(columns=['positionText', 'Driver', 'Constructor', 'Time'], axis=1)\n\n\nrace_df.head()\n\n\n\n\n\n\n\n\nseason\nround\nraceName\ncircuitName\nlocality\ncountry\nlat\nlong\ndate\nnumber\n...\ngrid\nlaps\nstatus\ndriverId\ndriverGivenName\ndriverFamilyName\nconstructorId\nconstructorName\ntimeMillis\ntime\n\n\n\n\n0\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n3\n...\n3\n58\nFinished\nmichael_schumacher\nMichael\nSchumacher\nferrari\nFerrari\n5641987.0\n1:34:01.987\n\n\n1\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n4\n...\n4\n58\nFinished\nbarrichello\nRubens\nBarrichello\nferrari\nFerrari\n5653402.0\n+11.415\n\n\n2\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n9\n...\n11\n58\nFinished\nralf_schumacher\nRalf\nSchumacher\nwilliams\nWilliams\n5661996.0\n+20.009\n\n\n3\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n22\n...\n8\n58\nFinished\nvilleneuve\nJacques\nVilleneuve\nbar\nBAR\n5686434.0\n+44.447\n\n\n4\n2000\n1\nAustralian Grand Prix\nAlbert Park Grand Prix Circuit\nMelbourne\nAustralia\n-37.8497\n144.968\n2000-03-12\n11\n...\n9\n58\nFinished\nfisichella\nGiancarlo\nFisichella\nbenetton\nBenetton\n5687152.0\n+45.165\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n## Cleaning all the race_data and appending them in to a single csv file \n\n# input output directory\ninput_dir = \"../../data/raw-data/\"\n# output directory\noutput_file = \"../../data/processed-data/all_race_results_cleaned.csv\"\n\n# creating an output file\nos.makedirs(os.path.dirname(output_file), exist_ok=True)\n\n# initialize a list to hold all results\nall_combined_results = []\n\n# process each JSON file in the input directory\n# they are the only .json files in the directory\nfor file_name in os.listdir(input_dir):\n    # process only JSON files\n    if file_name.endswith(\".json\"): \n        file_path = os.path.join(input_dir, file_name)\n        print(f\"Processing file: {file_path}\")\n        \n        # read the JSON file\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        \n        # extract races from the JSON\n        races = data.get('MRData', {}).get('RaceTable', {}).get('Races', [])\n        \n        # prepare a list to hold flattened race results for this file\n        file_results = []\n\n        # loop through each race and flatten its data\n        for race in races:\n            # extract required information \n            race_info = { \n                \"season\": race.get(\"season\", \"\"),\n                \"round\": race.get(\"round\", \"\"),\n                \"raceName\": race.get(\"raceName\", \"\"),\n                \"circuitName\": race.get(\"Circuit\", {}).get(\"circuitName\", \"\"),\n                \"locality\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"locality\", \"\"),\n                \"country\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"country\", \"\"),\n                \"lat\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"lat\", \"\"),\n                \"long\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"long\", \"\"),\n                \"date\": race.get(\"date\", \"\"),\n            }\n            \n            # extract results and combine with useful details\n            results = race.get(\"Results\", [])\n            for result in results:\n                # combine race-level and result-level data\n                combined_data = {**race_info, **result}\n                # add flattened driver and constructor details\n                combined_data.update({\n                    \"driverId\": result.get(\"Driver\", {}).get(\"driverId\", \"\"),\n                    \"driverGivenName\": result.get(\"Driver\", {}).get(\"givenName\", \"\"),\n                    \"driverFamilyName\": result.get(\"Driver\", {}).get(\"familyName\", \"\"),\n                    \"constructorId\": result.get(\"Constructor\", {}).get(\"constructorId\", \"\"),\n                    \"constructorName\": result.get(\"Constructor\", {}).get(\"name\", \"\"),\n                    \"status\": result.get(\"status\", \"\"),\n                    \"timeMillis\": result.get(\"Time\", {}).get(\"millis\", \"\"),\n                    \"time\": result.get(\"Time\", {}).get(\"time\", \"\")\n                })\n                file_results.append(combined_data)\n\n        # append the results for this file to the combined list\n        all_combined_results.extend(file_results)\n\n# aonvert the combined results to a Pandas DataFrame\ndf = pd.DataFrame(all_combined_results)\n\n# aave the combined DataFrame to a CSV file\ndf.to_csv(output_file, index=False)\n\n\nProcessing file: ../../data/raw-data/race_data_2010.json\nProcessing file: ../../data/raw-data/race_data_2006.json\nProcessing file: ../../data/raw-data/race_data_2007.json\nProcessing file: ../../data/raw-data/race_data_2011.json\nProcessing file: ../../data/raw-data/race_data_2016.json\nProcessing file: ../../data/raw-data/race_data_2000.json\nProcessing file: ../../data/raw-data/race_data_2020.json\nProcessing file: ../../data/raw-data/race_data_2021.json\nProcessing file: ../../data/raw-data/race_data_2001.json\nProcessing file: ../../data/raw-data/race_data_2017.json\nProcessing file: ../../data/raw-data/race_data_2002.json\nProcessing file: ../../data/raw-data/race_data_2014.json\nProcessing file: ../../data/raw-data/race_data_2022.json\nProcessing file: ../../data/raw-data/race_data_2018.json\nProcessing file: ../../data/raw-data/race_data_2019.json\nProcessing file: ../../data/raw-data/race_data_2023.json\nProcessing file: ../../data/raw-data/race_data_2015.json\nProcessing file: ../../data/raw-data/race_data_2003.json\nProcessing file: ../../data/raw-data/race_data_2008.json\nProcessing file: ../../data/raw-data/race_data_2004.json\nProcessing file: ../../data/raw-data/race_data_2012.json\nProcessing file: ../../data/raw-data/race_data_2013.json\nProcessing file: ../../data/raw-data/race_data_2005.json\nProcessing file: ../../data/raw-data/race_data_2009.json\n\n\n\ndf = pd.read_csv(\"../../data/processed-data/all_race_results_cleaned.csv\")\n\n\ndf.shape\n\n(2400, 27)\n\n\n\ndf.columns\n\nIndex(['season', 'round', 'raceName', 'circuitName', 'locality', 'country',\n       'lat', 'long', 'date', 'number', 'position', 'positionText', 'points',\n       'Driver', 'Constructor', 'grid', 'laps', 'status', 'Time', 'FastestLap',\n       'driverId', 'driverGivenName', 'driverFamilyName', 'constructorId',\n       'constructorName', 'timeMillis', 'time'],\n      dtype='object')\n\n\n\ndf = df.drop(columns=['positionText', 'number', 'FastestLap', 'Driver', 'Constructor', 'Time'], axis=1)\n\n\ndf.head()\n\n\n\n\n\n\n\n\nseason\nround\nraceName\ncircuitName\nlocality\ncountry\nlat\nlong\ndate\nposition\n...\ngrid\nlaps\nstatus\ndriverId\ndriverGivenName\ndriverFamilyName\nconstructorId\nconstructorName\ntimeMillis\ntime\n\n\n\n\n0\n2010\n1\nBahrain Grand Prix\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n1\n...\n3\n49\nFinished\nalonso\nFernando\nAlonso\nferrari\nFerrari\n5960396.0\n1:39:20.396\n\n\n1\n2010\n1\nBahrain Grand Prix\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n2\n...\n2\n49\nFinished\nmassa\nFelipe\nMassa\nferrari\nFerrari\n5976495.0\n+16.099\n\n\n2\n2010\n1\nBahrain Grand Prix\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n3\n...\n4\n49\nFinished\nhamilton\nLewis\nHamilton\nmclaren\nMcLaren\n5983578.0\n+23.182\n\n\n3\n2010\n1\nBahrain Grand Prix\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n4\n...\n1\n49\nFinished\nvettel\nSebastian\nVettel\nred_bull\nRed Bull\n5999195.0\n+38.799\n\n\n4\n2010\n1\nBahrain Grand Prix\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n5\n...\n5\n49\nFinished\nrosberg\nNico\nRosberg\nmercedes\nMercedes\n6000609.0\n+40.213\n\n\n\n\n5 rows × 21 columns"
  },
  {
    "objectID": "technical-details/data-collection/main.html#footnotes",
    "href": "technical-details/data-collection/main.html#footnotes",
    "title": "Data Collection",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n2010 Bahrain Grand Prix↩︎"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#combine-the-race-data",
    "href": "technical-details/data-cleaning/main.html#combine-the-race-data",
    "title": "Data Cleaning",
    "section": "Combine the Race data",
    "text": "Combine the Race data\n\n## Cleaning all the race_data and appending them in to a single csv file \n\n# input output directory\ninput_dir = \"../../data/raw-data/\"\n# output directory\noutput_file = \"../../data/processed-data/all_race_results_cleaned.csv\"\n\n# creating an output file\nos.makedirs(os.path.dirname(output_file), exist_ok=True)\n\n# initialize a list to hold all results\nall_combined_results = []\n\n# process each JSON file in the input directory\n# they are the only .json files in the directory\nfor file_name in os.listdir(input_dir):\n    # process only JSON files\n    if file_name.endswith(\".json\"): \n        file_path = os.path.join(input_dir, file_name)\n        #print(f\"Processing file: {file_path}\")\n        \n        # read the JSON file\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        \n        # extract races from the JSON\n        races = data.get('MRData', {}).get('RaceTable', {}).get('Races', [])\n        \n        # prepare a list to hold flattened race results for this file\n        file_results = []\n\n        # loop through each race and flatten its data\n        for race in races:\n            # extract required information \n            race_info = { \n                \"season\": race.get(\"season\", \"\"),\n                \"round\": race.get(\"round\", \"\"),\n                \"raceName\": race.get(\"raceName\", \"\"),\n                \"url\": race.get(\"url\",\"\"),\n                \"circuitName\": race.get(\"Circuit\", {}).get(\"circuitName\", \"\"),\n                \"locality\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"locality\", \"\"),\n                \"country\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"country\", \"\"),\n                \"lat\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"lat\", \"\"),\n                \"long\": race.get(\"Circuit\", {}).get(\"Location\", {}).get(\"long\", \"\"),\n                \"date\": race.get(\"date\", \"\"),\n            }\n            \n            # extract results and combine with useful details\n            results = race.get(\"Results\", [])\n            for result in results:\n                # combine race-level and result-level data\n                combined_data = {**race_info, **result}\n                # add flattened driver and constructor details\n                combined_data.update({\n                    \"driverId\": result.get(\"Driver\", {}).get(\"driverId\", \"\"),\n                    \"driverGivenName\": result.get(\"Driver\", {}).get(\"givenName\", \"\"),\n                    \"driverFamilyName\": result.get(\"Driver\", {}).get(\"familyName\", \"\"),\n                    \"constructorId\": result.get(\"Constructor\", {}).get(\"constructorId\", \"\"),\n                    \"constructorName\": result.get(\"Constructor\", {}).get(\"name\", \"\"),\n                    \"status\": result.get(\"status\", \"\"),\n                    \"timeMillis\": result.get(\"Time\", {}).get(\"millis\", \"\"),\n                    \"time\": result.get(\"Time\", {}).get(\"time\", \"\")\n                })\n                file_results.append(combined_data)\n\n        # append the results for this file to the combined list\n        all_combined_results.extend(file_results)\n\n# aonvert the combined results to a Pandas DataFrame\ndf = pd.DataFrame(all_combined_results)\n\n# aave the combined DataFrame to a CSV file\ndf.to_csv(output_file, index=False)"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#cleaning-weather-data",
    "href": "technical-details/data-cleaning/main.html#cleaning-weather-data",
    "title": "Data Cleaning",
    "section": "Cleaning Weather Data",
    "text": "Cleaning Weather Data\n\nweather_df = pd.read_csv(\"../../data/raw-data/weather/race_data_with_weather.csv\")\n\n\nweather_df.isnull().sum()\n\nseason      0\nraceName    0\nurl         0\nweather     0\ndtype: int64\n\n\n\nweather_df['weather']\n\n0                                                  Sunny\n1                      Overcast with light rain at start\n2                                     Mainly cloudy, dry\n3                                           Cloudy, rain\n4                                     Mainly cloudy, dry\n                             ...                        \n117    Sunny with temperatures reaching up to 27 °C (...\n118    Dry start, with heavy rain and thunderstorm/mo...\n119                                                 Rain\n120                                                Sunny\n121                                          Warm, Sunny\nName: weather, Length: 122, dtype: object\n\n\n\nwe will try to categorise the weather description into one of the following categories:\n\nSunny\nCloudy\nRainy\nWindy\n\n\ndef classify_weather(weather_description):\n\n    weather_description = weather_description.lower()\n    \n    if \"sunny\" in weather_description or \"fine\" in weather_description or \"clear\" in weather_description or \"dry\" in weather_description:\n        return \"Sunny\"\n    elif \"cloudy\" in weather_description or \"overcast\" in weather_description or \"cloud\" in weather_description:\n        return \"Cloudy\"\n    elif \"rain\" in weather_description or \"thunderstorms\" in weather_description or \"drizzle\" in weather_description:\n        return \"Rainy\"\n    elif \"windy\" in weather_description:\n        return \"Windy\"\n    # If no match, classify as \"Not Available\"\n    else:\n        return \"Not Available\" \n\n\n# call classify_weather()\nweather_df['weather_class'] = weather_df['weather'].apply(classify_weather)\n\n# Save the updated DataFrame to a CSV file\noutput_csv = \"../../data/processed-data/classified_weather_data.csv\"\nweather_df.to_csv(output_csv, index=False)\n\n\nweather_df['weather_class'].value_counts()\n\nweather_class\nSunny            95\nCloudy           24\nRainy             2\nNot Available     1\nName: count, dtype: int64\n\n\nThe weather data for 2006 European Grand Prix is not available on wikipedia. - Using longitude, latitude and the date: The weather was Sunny\n\nweather_df['weather_class'] = weather_df['weather_class'].replace('Not Available', 'Sunny')\n\n\noutput_csv = \"../../data/processed-data/classified_weather_data.csv\"\nweather_df.to_csv(output_csv, index=False)\n\n\n# merge race results and weather information\nrace_df = pd.read_csv(\"../../data/processed-data/all_race_results_cleaned.csv\")\nweather_df = pd.read_csv(\"../../data/processed-data/classified_weather_data.csv\")\n\nmerged_df = race_df.merge(weather_df[['url','weather_class']], on='url', how='left')\n\nmerged_df.to_csv(\"../../data/processed-data/race_weather_merged.csv\", index=False)"
  },
  {
    "objectID": "technical-details/data-cleaning/main.html#clean-the-merged-data",
    "href": "technical-details/data-cleaning/main.html#clean-the-merged-data",
    "title": "Data Cleaning",
    "section": "Clean the merged data",
    "text": "Clean the merged data\n\nmain_df = pd.read_csv(\"../../data/processed-data/race_weather_merged.csv\")\nmain_df.head()\n\n\n\n\n\n\n\n\nseason\nround\nraceName\nurl\ncircuitName\nlocality\ncountry\nlat\nlong\ndate\n...\nTime\nFastestLap\ndriverId\ndriverGivenName\ndriverFamilyName\nconstructorId\nconstructorName\ntimeMillis\ntime\nweather_class\n\n\n\n\n0\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n...\n{'millis': '5960396', 'time': '1:39:20.396'}\n{'rank': '1', 'lap': '45', 'Time': {'time': '1...\nalonso\nFernando\nAlonso\nferrari\nFerrari\n5960396.0\n1:39:20.396\nSunny\n\n\n1\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n...\n{'millis': '5976495', 'time': '+16.099'}\n{'rank': '5', 'lap': '38', 'Time': {'time': '1...\nmassa\nFelipe\nMassa\nferrari\nFerrari\n5976495.0\n+16.099\nSunny\n\n\n2\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n...\n{'millis': '5983578', 'time': '+23.182'}\n{'rank': '4', 'lap': '42', 'Time': {'time': '1...\nhamilton\nLewis\nHamilton\nmclaren\nMcLaren\n5983578.0\n+23.182\nSunny\n\n\n3\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n...\n{'millis': '5999195', 'time': '+38.799'}\n{'rank': '12', 'lap': '32', 'Time': {'time': '...\nvettel\nSebastian\nVettel\nred_bull\nRed Bull\n5999195.0\n+38.799\nSunny\n\n\n4\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n26.0325\n50.5106\n2010-03-14\n...\n{'millis': '6000609', 'time': '+40.213'}\n{'rank': '13', 'lap': '45', 'Time': {'time': '...\nrosberg\nNico\nRosberg\nmercedes\nMercedes\n6000609.0\n+40.213\nSunny\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nmain_df.columns\n\nIndex(['season', 'round', 'raceName', 'url', 'circuitName', 'locality',\n       'country', 'lat', 'long', 'date', 'number', 'position', 'positionText',\n       'points', 'Driver', 'Constructor', 'grid', 'laps', 'status', 'Time',\n       'FastestLap', 'driverId', 'driverGivenName', 'driverFamilyName',\n       'constructorId', 'constructorName', 'timeMillis', 'time',\n       'weather_class'],\n      dtype='object')\n\n\n\n# drop un-needed columns\nmain_df = main_df.drop(['lat', 'long', 'number', 'positionText', 'Driver', 'Constructor', 'Time', 'FastestLap'], axis=1)\n\n\nmain_df.columns\n\nIndex(['season', 'round', 'raceName', 'url', 'circuitName', 'locality',\n       'country', 'date', 'position', 'points', 'grid', 'laps', 'status',\n       'driverId', 'driverGivenName', 'driverFamilyName', 'constructorId',\n       'constructorName', 'timeMillis', 'time', 'weather_class'],\n      dtype='object')\n\n\n\nmain_df.isnull().sum()\n\nseason                 0\nround                  0\nraceName               0\nurl                    0\ncircuitName            0\nlocality               0\ncountry                0\ndate                   0\nposition               0\npoints                 0\ngrid                   0\nlaps                   0\nstatus                 0\ndriverId               0\ndriverGivenName        0\ndriverFamilyName       0\nconstructorId          0\nconstructorName        0\ntimeMillis          1291\ntime                1291\nweather_class          0\ndtype: int64\n\n\nThe missing values in ‘timeMillis' and’time' columns are of those drivers who did not finish the race. Therefore, we will drop these columns and try to analyse the performance based on other metrics.\n\n# drop un-needed columns\nmain_df = main_df.drop(['timeMillis', 'time'], axis=1)\n\n\nmain_df['constructorName'].value_counts()\n\nconstructorName\nFerrari           235\nMcLaren           234\nWilliams          229\nRed Bull          184\nRenault           142\nSauber            139\nMercedes          134\nToro Rosso        127\nForce India       100\nHaas F1 Team       79\nToyota             76\nJordan             57\nBAR                56\nMinardi            54\nAlfa Romeo         50\nJaguar             45\nBMW Sauber         40\nAlphaTauri         40\nLotus F1           38\nAlpine F1 Team     30\nAston Martin       30\nHonda              28\nArrows             26\nHRT                24\nMarussia           24\nSuper Aguri        24\nCaterham           24\nRacing Point       20\nProst              18\nBenetton           18\nVirgin             16\nManor Marussia     16\nLotus              16\nBrawn              10\nMF1                 9\nSpyker              8\nName: count, dtype: int64\n\n\n\nmain_df = main_df.drop(['constructorId'], axis=1)\n\nSome of the team names were changed in the process of rebranding or due to a change in ownership. For accurate analysis, we will replace the older versions of the constructors’ names with the current ones.\n\nconstructor_mapping= {\n    \"Jaguar\" : \"Red Bull\",\n    \"BMW Sauber\" : \"Sauber\",\n    \"Alfa Romeo\" : \"Sauber\",\n    \"BAR\" : \"Mercedes\",\n    \"Honda\" : \"Mercedes\",\n    \"Brawn\" : \"Mercedes\",\n    \"Minardi\" : \"AlphaTauri\",\n    \"Toro Rosso\" : \"AlphaTauri\",\n    \"Force India\" : \"Aston Martin\",\n    \"Jordan\" : \"Aston Martin\",\n    \"Racing Point\" : \"Aston Martin\",\n    \"MF1\" : \"Aston Martin\",\n    \"Spyker\" : \"Aston Martin\",\n    \"Lotus F1\" : \"Alpine F1 Team\",\n    \"Renault\" : \"Alpine F1 Team\",\n    \"Benetton\" : \"Alpine F1 Team\",\n    \"Manor Marussia\" : \"Marussia\",\n    \"Virgin\" : \"Marussia\",\n    \"Lotus\" : \"Caterham\",\n\n}\n\n\nmain_df['constructorName'] = main_df['constructorName'].replace(constructor_mapping)\n\n\nmain_df['constructorName'].value_counts()\n\nconstructorName\nFerrari           235\nMcLaren           234\nRed Bull          229\nWilliams          229\nSauber            229\nMercedes          228\nAlpine F1 Team    228\nAston Martin      224\nAlphaTauri        221\nHaas F1 Team       79\nToyota             76\nMarussia           56\nCaterham           40\nArrows             26\nSuper Aguri        24\nHRT                24\nProst              18\nName: count, dtype: int64\n\n\n\nmain_df['driverName'] = main_df['driverGivenName'] + \" \" + main_df['driverFamilyName']\n\n\nmain_df = main_df.drop(['driverGivenName','driverFamilyName'], axis = 1)\n\n\nmain_df.head(2)\n\n\n\n\n\n\n\n\nseason\nround\nraceName\nurl\ncircuitName\nlocality\ncountry\ndate\nposition\npoints\ngrid\nlaps\nstatus\ndriverId\nconstructorName\nweather_class\ndriverName\n\n\n\n\n0\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n1\n25.0\n3\n49\nFinished\nalonso\nFerrari\nSunny\nFernando Alonso\n\n\n1\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n2\n18.0\n2\n49\nFinished\nmassa\nFerrari\nSunny\nFelipe Massa\n\n\n\n\n\n\n\n\nmain_df['status'].unique()\n\narray(['Finished', '+1 Lap', '+2 Laps', 'Electrical', 'Hydraulics',\n       'Overheating', 'Gearbox', 'Suspension', 'Accident', '+5 Laps',\n       'Wheel', 'Engine', 'Spun off', 'Collision', '+3 Laps', '+4 Laps',\n       '+10 Laps', 'Throttle', 'Clutch', 'Technical', 'Mechanical',\n       'Driveshaft', 'Transmission', 'Steering', 'Puncture', 'Brakes',\n       'Retired', 'Tyre', 'Fuel pressure', '+9 Laps', 'Water leak',\n       'Disqualified', 'Did not qualify', '+42 Laps', 'Engine misfire',\n       'Power Unit', 'Oil pressure', 'Safety concerns', 'Fuel system',\n       '+6 Laps', 'Electronics', 'Collision damage', 'Wheel nut',\n       'Battery', 'Oil leak', '+7 Laps', 'Stalled', 'Exhaust',\n       'Vibrations', 'Broken wing', 'Fuel', 'Wheel rim', 'Power loss',\n       '107% Rule', '+8 Laps', 'ERS', 'Withdrew', 'Cooling system',\n       'Water pump', 'Fuel leak', 'Front wing', 'Turbo', 'Damage',\n       'Out of fuel', 'Radiator', 'Oil line', 'Fuel rig',\n       'Launch control', 'Not classified', 'Pneumatics', 'Differential'],\n      dtype=object)\n\n\n\n# classifying different categories under status\ndef classify_status(status):\n    if status == 'Finished':\n        return 'Finished'\n    elif 'Lap' in status:  # Handles all with 'Lap'\n        return 'Lapped'\n    elif status in ['Accident', 'Collision', 'Spun off', 'Withdrew']:\n        return 'Accident'\n    else:\n        return 'Mechanical'\n\nmain_df['status'] = main_df['status'].apply(classify_status)\n\n\nmain_df['status'].value_counts()\n\nstatus\nFinished      1105\nLapped         693\nMechanical     412\nAccident       190\nName: count, dtype: int64\n\n\n\nmain_df.to_csv(\"../../data/processed-data/race_info.csv\", index=False)\n\n\n# Finish category - new categorical variable\ndata = pd.read_csv(\"../../data/processed-data/race_info.csv\")\ndata['FinishCategory'] = ''\nfor i in range(len(data)):\n    if data['position'][i] in [1,2,3]:\n        data['FinishCategory'][i] = \"Podium\"\n    \n    elif data['position'][i] in [4,5,6,7,8,9,10]:\n        data['FinishCategory'][i] = \"Points Finish\"\n\n    else:\n        data['FinishCategory'][i] = \"No Points\"\n\n\ndata.head()\n\n\n\n\n\n\n\n\nseason\nround\nraceName\nurl\ncircuitName\nlocality\ncountry\ndate\nposition\npoints\ngrid\nlaps\nstatus\ndriverId\nconstructorName\nweather_class\ndriverName\nFinishCategory\n\n\n\n\n0\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n1\n25.0\n3\n49\nFinished\nalonso\nFerrari\nSunny\nFernando Alonso\nPodium\n\n\n1\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n2\n18.0\n2\n49\nFinished\nmassa\nFerrari\nSunny\nFelipe Massa\nPodium\n\n\n2\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n3\n15.0\n4\n49\nFinished\nhamilton\nMcLaren\nSunny\nLewis Hamilton\nPodium\n\n\n3\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n4\n12.0\n1\n49\nFinished\nvettel\nRed Bull\nSunny\nSebastian Vettel\nPoints Finish\n\n\n4\n2010\n1\nBahrain Grand Prix\nhttp://en.wikipedia.org/wiki/2010_Bahrain_Gran...\nBahrain International Circuit\nSakhir\nBahrain\n2010-03-14\n5\n10.0\n5\n49\nFinished\nrosberg\nMercedes\nSunny\nNico Rosberg\nPoints Finish\n\n\n\n\n\n\n\n\ndata.to_csv(\"../../data/processed-data/race_info.csv\", index=False)\n\n\n# race track features\ndata = pd.read_csv(\"../../data/raw-data/circuit_data/merged_circuit_features.csv\")\ndata.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\n\n\n\n\n0\n2020\nPre-Season Test 1\n4312.438437\n323\n70.673953\n1\n4\n\n\n1\n2020\nPre-Season Test 2\n4312.438437\n323\n70.673953\n1\n4\n\n\n2\n2020\nAustrian Grand Prix\n4312.438437\n323\n70.673953\n1\n4\n\n\n3\n2020\nStyrian Grand Prix\n4292.610384\n300\n46.556886\n2\n6\n\n\n4\n2020\nHungarian Grand Prix\n4348.049386\n318\n58.114374\n0\n6\n\n\n\n\n\n\n\n\ndata.isnull().sum()\n\nYear                   0\nGrand Prix             0\nTrack Length (m)       0\nMax Speed (km/h)       0\nFull Throttle (%)      0\nNumber of Corners      0\nNumber of Straights    0\ndtype: int64\n\n\n\nreq_cols = [\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\",\"Number of Corners\", \"Number of Straights\"]\nscaler = StandardScaler()\n\n# Apply the scaler to the dataframe\ndata[req_cols] = scaler.fit_transform(data[req_cols])\n\n\ndata.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\n\n\n\n\n\n\n\n\ndata.to_csv(\"../../data/processed-data/race_track_features.csv\")"
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#clustering",
    "href": "technical-details/unsupervised-learning/main.html#clustering",
    "title": "Unsupervised Learning",
    "section": "Clustering",
    "text": "Clustering\n\n# import required libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering, SpectralClustering\nfrom sklearn.metrics import silhouette_score, calinski_harabasz_score\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster, set_link_color_palette\n\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# load the data\ndf = pd.read_csv(\"../../data/processed-data/race_track_features.csv\")\ndf.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\nUnnamed: 7\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\nNaN\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\nNaN\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\nNaN\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\nNaN\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\nNaN\n\n\n\n\n\n\n\n\nK-Means\n\n# hyperparameter tuning\nreq_cols = [\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]\n\n# Initialize lists to store evaluation metrics\nem = []  # For inertia (WCSS)\nss = []  # For silhouette scores\nfor i in range(2,10):\n    kmeans = KMeans(n_clusters = i).fit(df[req_cols])\n    \n    # intertia = within cluster sum of sqaures (WCSS)\n    em.append(kmeans.inertia_)\n    # silhouette scores\n    score = silhouette_score(df[req_cols], kmeans.labels_)\n    ss.append(score)\n\n\nk_values = range(2, 10)\n\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# First y-axis for Intertia \nax1.plot(k_values, em, 'blue', marker='o', label='Inertia Score') \nax1.set_xlabel(\"Number of Clusters (k)\", fontsize=14)\nax1.set_ylabel(\"Intertia\", color ='blue', fontsize=14)\nax1.tick_params(axis='y', labelcolor ='blue', labelsize=14)\n\n# Second y-axis for silhouette scores\nax2 = ax1.twinx()\nax2.plot(k_values, ss, 'darkslateblue',marker='o', label='Silhouette Score') \nax2.set_ylabel(\"Silhouette Score\", color = 'darkslateblue', fontsize=14)\nax2.tick_params(axis='y', labelcolor ='darkslateblue', labelsize=14)\n\n# Title\nplt.title(\"Elbow Curve and Silhouette Score vs Number of Clusters\", fontsize=14)\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Initializing and fitting the KMeans model with the optimal number of clusters\nclusters = 5\nkmeans = KMeans(n_clusters=clusters, random_state=123, n_init='auto')\nkmeans.fit(df[req_cols])\n\n# Predicting cluster labels\ndf['cluster-kmeans'] = kmeans.labels_\ndf.drop(columns=[\"Unnamed: 7\"], inplace=True)\ndf.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\nclusters-dbscan\ncluster-kmeans\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\n-1\n2\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\n-1\n1\n\n\n\n\n\n\n\n\ncustom_colors = [\"cyan\", \"deepskyblue\", \"blue\", \"darkslateblue\", \"royalblue\"]\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x=df['Max Speed (km/h)'], y=df['Full Throttle (%)'], hue=df['cluster-kmeans'], palette=custom_colors)\nplt.title('KMeans Clustering (bill length vs bill depth)')\n\nplt.xlabel('Max Speed')\nplt.ylabel('Full Throttle')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nDBSCAN\n\n\nfeatures = df[[\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]]\n\n\neps_range = np.arange(0.1, 2.0, 0.1)\n# Range for min_samples to test\nmin_samples_range = range(1, 20)\n\n# Variables to store the best results\nbest_score = -1\nopt_eps = None\nbest_min_samples = None\nbest_cluster_count = None\n\n# Loop through each combination of eps and min_samples\nfor eps in eps_range:\n    for min_samples in min_samples_range:\n        # Initialize DBSCAN with the current parameters\n        dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n        # Predict cluster labels\n        labels = dbscan.fit_predict(features)\n        \n        # Ignore configurations that result in a single cluster or all points being noise\n        if len(set(labels)) &gt; 1:\n            # Calculate silhouette score for the current parameters\n            score = silhouette_score(features, labels)\n            \n            # Update best parameters if the current score is the highest\n            if score &gt; best_score:\n                best_score = score\n                opt_eps = eps\n                best_min_samples = min_samples\n                # Count clusters excluding noise\n                best_cluster_count = len(set(labels)) - (1 if -1 in labels else 0)\n\n# Print the optimal parameters and corresponding silhouette score\nprint(\"Best Silhouette Score:\", best_score)\nprint(\"Optimal eps:\", opt_eps)\nprint(\"Optimal min_samples:\", best_min_samples)\nprint(\"Optimal number of clusters:\", best_cluster_count)\n\nBest Silhouette Score: 0.4901591287514251\nOptimal eps: 0.4\nOptimal min_samples: 5\nOptimal number of clusters: 1\n\n\n\nbest_min_samples = best_min_samples\noptimal_eps = opt_eps\n\n# Initializing and fitting the DBSCAN model with the optimal parameters\ndbscan = DBSCAN(eps = opt_eps, min_samples = best_min_samples)\nlabels_final = dbscan.fit_predict(features)\n\n\ndf['clusters-dbscan'] = labels_final\n\n\n\nHierarchical Clustering\n\nset_link_color_palette([\"lightskyblue\", \"cornflowerblue\", \"blue\", \"steelblue\"])\n\ndf = pd.read_csv(\"../../data/processed-data/race_track_features.csv\")\ndf = df[df[\"Year\"] == 2023]\n\nfeatures = [\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]\nX = df[features]\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nlinkage_matrix = linkage(X_scaled, method='ward')  \n\nplt.figure(figsize=(10, 7))\ndendrogram(linkage_matrix, labels=df[\"Grand Prix\"].values, leaf_rotation=90, leaf_font_size=10,color_threshold=6)\nplt.title(\"Hierarchical Clustering Dendrogram - 2023\", fontsize = 14)\n\nplt.xlabel(\"Grand Prix\", fontsize = 14)\nplt.ylabel(\"Distance\", fontsize = 14)\nplt.show()\n\nmax_distance = 6\nclusters = fcluster(linkage_matrix, max_distance, criterion='distance')\n\n\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\nclusters-dbscan\ncluster-kmeans\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\n-1\n2\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\n-1\n1"
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#k-means",
    "href": "technical-details/unsupervised-learning/main.html#k-means",
    "title": "Unsupervised Learning",
    "section": "K-Means",
    "text": "K-Means\n\n# hyperparameter tuning\nreq_cols = [\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]\n\n# Initialize lists to store evaluation metrics\nem = []  # For inertia (WCSS)\nss = []  # For silhouette scores\nfor i in range(2,10):\n    kmeans = KMeans(n_clusters = i).fit(df[req_cols])\n    \n    # intertia = within cluster sum of sqaures (WCSS)\n    em.append(kmeans.inertia_)\n    # silhouette scores\n    score = silhouette_score(df[req_cols], kmeans.labels_)\n    ss.append(score)\n\n\nk_values = range(2, 10)\n\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# First y-axis for Intertia \nax1.plot(k_values, em, 'blue', marker='o', label='Inertia Score') \nax1.set_xlabel(\"Number of Clusters (k)\", fontsize=14)\nax1.set_ylabel(\"Intertia\", color ='blue', fontsize=14)\nax1.tick_params(axis='y', labelcolor ='blue', labelsize=14)\n\n# Second y-axis for silhouette scores\nax2 = ax1.twinx()\nax2.plot(k_values, ss, 'darkslateblue',marker='o', label='Silhouette Score') \nax2.set_ylabel(\"Silhouette Score\", color = 'darkslateblue', fontsize=14)\nax2.tick_params(axis='y', labelcolor ='darkslateblue', labelsize=14)\n\n# Title\nplt.title(\"Elbow Curve and Silhouette Score vs Number of Clusters\", fontsize=14)\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Initializing and fitting the KMeans model with the optimal number of clusters\nclusters = 5\nkmeans = KMeans(n_clusters=clusters, random_state=123, n_init='auto')\nkmeans.fit(df[req_cols])\n\n# Predicting cluster labels\ndf['cluster-kmeans'] = kmeans.labels_\ndf.drop(columns=[\"Unnamed: 7\"], inplace=True)\ndf.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\nclusters-dbscan\ncluster-kmeans\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\n-1\n2\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\n-1\n1\n\n\n\n\n\n\n\n\ncustom_colors = [\"cyan\", \"deepskyblue\", \"blue\", \"darkslateblue\", \"royalblue\"]\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x=df['Max Speed (km/h)'], y=df['Full Throttle (%)'], hue=df['cluster-kmeans'], palette=custom_colors)\nplt.title('KMeans Clustering (bill length vs bill depth)')\n\nplt.xlabel('Max Speed')\nplt.ylabel('Full Throttle')\nplt.show()"
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#dbscan",
    "href": "technical-details/unsupervised-learning/main.html#dbscan",
    "title": "Unsupervised Learning",
    "section": "DBSCAN",
    "text": "DBSCAN\n\n\nfeatures = df[[\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]]\n\n\neps_range = np.arange(0.1, 2.0, 0.1)\n# Range for min_samples to test\nmin_samples_range = range(1, 20)\n\n# Variables to store the best results\nbest_score = -1\nopt_eps = None\nbest_min_samples = None\nbest_cluster_count = None\n\n# Loop through each combination of eps and min_samples\nfor eps in eps_range:\n    for min_samples in min_samples_range:\n        # Initialize DBSCAN with the current parameters\n        dbscan = DBSCAN(eps=eps, min_samples=min_samples)\n        # Predict cluster labels\n        labels = dbscan.fit_predict(features)\n        \n        # Ignore configurations that result in a single cluster or all points being noise\n        if len(set(labels)) &gt; 1:\n            # Calculate silhouette score for the current parameters\n            score = silhouette_score(features, labels)\n            \n            # Update best parameters if the current score is the highest\n            if score &gt; best_score:\n                best_score = score\n                opt_eps = eps\n                best_min_samples = min_samples\n                # Count clusters excluding noise\n                best_cluster_count = len(set(labels)) - (1 if -1 in labels else 0)\n\n# Print the optimal parameters and corresponding silhouette score\nprint(\"Best Silhouette Score:\", best_score)\nprint(\"Optimal eps:\", opt_eps)\nprint(\"Optimal min_samples:\", best_min_samples)\nprint(\"Optimal number of clusters:\", best_cluster_count)\n\nBest Silhouette Score: 0.4901591287514251\nOptimal eps: 0.4\nOptimal min_samples: 5\nOptimal number of clusters: 1\n\n\n\nbest_min_samples = best_min_samples\noptimal_eps = opt_eps\n\n# Initializing and fitting the DBSCAN model with the optimal parameters\ndbscan = DBSCAN(eps = opt_eps, min_samples = best_min_samples)\nlabels_final = dbscan.fit_predict(features)\n\n\ndf['clusters-dbscan'] = labels_final"
  },
  {
    "objectID": "technical-details/unsupervised-learning/main.html#hierarchical-clustering",
    "href": "technical-details/unsupervised-learning/main.html#hierarchical-clustering",
    "title": "Unsupervised Learning",
    "section": "Hierarchical Clustering",
    "text": "Hierarchical Clustering\n\nset_link_color_palette([\"lightskyblue\", \"cornflowerblue\", \"blue\", \"steelblue\"])\n\ndf = pd.read_csv(\"../../data/processed-data/race_track_features.csv\")\ndf = df[df[\"Year\"] == 2023]\n\nfeatures = [\"Track Length (m)\", \"Max Speed (km/h)\", \"Full Throttle (%)\", \"Number of Corners\", \"Number of Straights\"]\nX = df[features]\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nlinkage_matrix = linkage(X_scaled, method='ward')  \n\nplt.figure(figsize=(10, 7))\ndendrogram(linkage_matrix, labels=df[\"Grand Prix\"].values, leaf_rotation=90, leaf_font_size=10,color_threshold=6)\nplt.title(\"Hierarchical Clustering Dendrogram - 2023\", fontsize = 14)\n\nplt.xlabel(\"Grand Prix\", fontsize = 14)\nplt.ylabel(\"Distance\", fontsize = 14)\nplt.show()\n\nmax_distance = 6\nclusters = fcluster(linkage_matrix, max_distance, criterion='distance')\n\n\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nYear\nGrand Prix\nTrack Length (m)\nMax Speed (km/h)\nFull Throttle (%)\nNumber of Corners\nNumber of Straights\nclusters-dbscan\ncluster-kmeans\n\n\n\n\n0\n2020\nPre-Season Test 1\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n1\n2020\nPre-Season Test 2\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n2\n2020\nAustrian Grand Prix\n-1.000607\n-0.115670\n1.059667\n-0.789651\n-0.938394\n-1\n1\n\n\n3\n2020\nStyrian Grand Prix\n-1.024865\n-1.840980\n-1.757479\n-0.275003\n-0.037811\n-1\n2\n\n\n4\n2020\nHungarian Grand Prix\n-0.957039\n-0.490737\n-0.407433\n-1.304300\n-0.037811\n-1\n1"
  }
]